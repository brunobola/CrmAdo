<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Framework.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Framework.DependencyInjection.ActivatorUtilities">
            <summary>
            Helper code for the various activator services.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="instanceType">The type to activate</param>
            <param name="parameters">Constructor arguments not provided by the <see cref="!:provider"/></param>
            <returns>An activated object of type instanceType</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a delegate that will instantiate a type with constructor arguments provided directly
            and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="instanceType">The type to activate</param>
            <param name="argumentTypes">
            The types of objects, in order, that will be passed to the returned function as its second parameter
            </param>
            <returns>
            A factory that will instantiate instanceType using an <see cref="T:System.IServiceProvider"/>
            and an argument array containing objects matching the types defined in argumentTypes
            </returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type to activate</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="parameters">Constructor arguments not provided by the <see cref="!:provider"/></param>
            <returns>An activated object of type T</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance``1(System.IServiceProvider)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="activator">The type activator</param>
            <param name="type">The type of the service</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.ObjectFactory">
            <summary>
            The result of <see cref="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateFactory(System.Type,System.Type[])"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to get service arguments from.</param>
            <param name="arguments">Additional constructor arguments.</param>
            <returns>The instantiated type.</returns>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.ServiceCollection">
            <summary>
            Default implementation of <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceCollection.Add(Microsoft.Framework.DependencyInjection.IServiceDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceCollection.Add(System.Collections.Generic.IEnumerable{Microsoft.Framework.DependencyInjection.IServiceDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceDescriptor.#ctor(System.Type,System.Type,Microsoft.Framework.DependencyInjection.LifecycleKind)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> with the specified <paramref name="implementationType"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="implementationType">The <see cref="T:System.Type"/> implementing the service.</param>
            <param name="lifecycle">The <see cref="T:Microsoft.Framework.DependencyInjection.LifecycleKind"/> of the service.</param>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceDescriptor.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> with the specified <paramref name="instance"/>
            as a <see cref="F:Microsoft.Framework.DependencyInjection.LifecycleKind.Singleton"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="instance">The instance implementing the service.</param>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceDescriptor.#ctor(System.Type,System.Func{System.IServiceProvider,System.Object},Microsoft.Framework.DependencyInjection.LifecycleKind)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> with the specified <paramref name="factory"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="factory">A factory used for creating service instances.</param>
            <param name="lifecycle">The <see cref="T:Microsoft.Framework.DependencyInjection.LifecycleKind"/> of the service.</param>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.Lifecycle">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ServiceType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ImplementationType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ImplementationInstance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ImplementationFactory">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.ServiceProvider">
            <summary>
            The default IServiceProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Get service of type <typeparamref name="T"/> from the IServiceProvider.
            </summary>
            <typeparam name="T">The type of service object to get.</typeparam>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the service object from.</param>
            <returns>A service object of type <typeparamref name="T"/> or null if there is no such service.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Get service of type <paramref name="serviceType"/> from the IServiceProvider.
            </summary>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the service object from.</param>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="serviceType"/>.</returns>
            <exception cref="T:System.InvalidOperationException">There is no service of type <paramref name="serviceType"/>.</exception>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Get service of type <typeparamref name="T"/> from the IServiceProvider.
            </summary>
            <typeparam name="T">The type of service object to get.</typeparam>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the service object from.</param>
            <returns>A service object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">There is no service of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.TypeActivatorExtensions.GetServiceOrCreateInstance``1(Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <param name="activator">The type activator</param>
            <param name="services">The service provider used to resolve dependencies</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.TypeActivatorExtensions.GetServiceOrCreateInstance(Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider,System.Type)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="activator">The type activator</param>
            <param name="services">The service provider used to resolve dependencies</param>
            <param name="type">The type of the service</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Resources.AmbiguousConstructorMatch">
            <summary>
            Multiple constructors accepting all given argument types have been found in type '{0}'. There should only be one applicable constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Resources.FormatAmbiguousConstructorMatch(System.Object)">
            <summary>
            Multiple constructors accepting all given argument types have been found in type '{0}'. There should only be one applicable constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Resources.CannotLocateImplementation">
            <summary>
            Unable to locate implementation '{0}' for service '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Resources.FormatCannotLocateImplementation(System.Object,System.Object)">
            <summary>
            Unable to locate implementation '{0}' for service '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Resources.CannotResolveService">
            <summary>
            Unable to resolve service for type '{0}' while attempting to activate '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Resources.FormatCannotResolveService(System.Object,System.Object)">
            <summary>
            Unable to resolve service for type '{0}' while attempting to activate '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Resources.CircularDependencyException">
            <summary>
            A circular dependency was detected for the service of type '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Resources.FormatCircularDependencyException(System.Object)">
            <summary>
            A circular dependency was detected for the service of type '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Resources.NoConstructorMatch">
            <summary>
            Unable to locate suitable constructor for type '{0}'. Ensure the type is concrete and all parameters are accepted by a constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Resources.FormatNoConstructorMatch(System.Object)">
            <summary>
            Unable to locate suitable constructor for type '{0}'. Ensure the type is concrete and all parameters are accepted by a constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Resources.NoServiceRegistered">
            <summary>
            No service for type '{0}' has been registered.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Resources.FormatNoServiceRegistered(System.Object)">
            <summary>
            No service for type '{0}' has been registered.
            </summary>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.ServiceLookup.InstanceService">
            <summary>
            Summary description for InstanceService
            </summary>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.ServiceLookup.IServiceCallSite">
            <summary>
            Summary description for IServiceCallSite
            </summary>
        </member>
    </members>
</doc>
