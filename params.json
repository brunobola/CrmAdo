{"name":"CrmAdo","tagline":"Bringing the power of ADO.Net to Dynamics Crm. ","body":"### Huh?\r\nSo you want to write some code that interacts with some data / enitities in Dynamics CRM? You need to retrieve contacts, linked to addresses, linked to some custom entity you say? Where the firstname is \"Joe\" you say? \r\n\r\nSo you reference the Dynamics SDK libraries, and you read through the documentation, and you start delving into the world of writing \"QueryExpressions\" and \"FetchXml\", and using an \"OrganisationService\", and building \"FilterExpressions\" and adding \"Conditions\" and getting \"AliasedValues\". \r\n\r\nTake a step back. Your code is now completely coupled to the Dynamics CRM SDK. Not only that, you have had to learn all sorts of SDK specific stuff to perform a simple query against a datasource. What happened to that wonderfully expressive query language that we allready have i.e T-SQL?\r\n\r\nCrmAdo is an ADO.Net data provider for Dynamics Crm. It's goal is to hide completely the Dynamics SDK from you, and expose Dynamics Crm as if it were an ordinary SQL datasource, via the standard ADO.Net classes, that you can execute T-SQL against. \r\n\r\nIt allows you to use the familiar T-SQL language to write your queries, just like you would against other data sources. CrmAdo will translate your T-SQL commands into the appropriate IOrganisation web service calls and interactions. \r\n\r\nWhen you use CrmAdo, your application won't be coupled to Dynamics CRM at all. It will be coupled with ADO.Net. This means you can easily change the undetlying datasource from Dynamics Crm, to be a SQL Server, Oracle, MySQL database, or any other data source that has an ADO.Net provider and your application won't really care.","google":"UA-49278315-1","note":"Don't delete this file! It's used internally to help with page regeneration."}