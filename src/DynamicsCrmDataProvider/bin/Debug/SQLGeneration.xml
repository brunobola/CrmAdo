<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SQLGeneration</name>
    </assembly>
    <members>
        <member name="T:SQLGeneration.Builders.AliasedProjection">
            <summary>
            Allows a column to be optionally referred to using an alias.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedProjection.#ctor(SQLGeneration.Builders.IProjectionItem,System.String)">
            <summary>
            Initializes a new instance of an AliasedProjection.
            </summary>
            <param name="item">The projection item.</param>
            <param name="alias">The alias to refer to the item with.</param>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedProjection.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens comprising the declaration of the projection.
            </summary>
            <param name="options">The configuration settings to use when generating the tokens.</param>
            <returns>The tokens comprising a declaration of the projection.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedProjection.GetReferenceTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens comprising a reference to the projection.
            </summary>
            <param name="options">The configuration settings to use when generating the tokens.</param>
            <returns>The tokens comprising a reference to the projection.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedProjection.GetProjectionName">
            <summary>
            Gets the name that will be used to refer to the projection.
            </summary>
            <returns>The name that will be used to refer to the projection.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.AliasedProjection.ProjectionItem">
            <summary>
            Gets the projection item.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.AliasedProjection.Alias">
            <summary>
            Gets or sets the alias for the projection item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.AliasedSource">
            <summary>
            Allows a table or select statement to be referred to by an alias.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IJoinItem">
            <summary>
            Represents an item that can appear in a join statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IJoinItem.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string that declares the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string declaring the item.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedSource.#ctor(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Initializes a new instance of an AliasedSource.
            </summary>
            <param name="source">The table or SELECT statement acting as the source.</param>
            <param name="alias">The alias to refer to the source with.</param>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedSource.Column(System.String)">
            <summary>
            Creates a column that can refer qualify its name with source.
            </summary>
            <param name="columnName">The name of the column.</param>
            <returns>The column.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedSource.SQLGeneration#Builders#IJoinItem#GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens comprising a declaration of the source.
            </summary>
            <param name="options">The configuration settings to use to generate the tokens.</param>
            <returns>The tokens comprising a reference to the source.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedSource.GetReferenceTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens comprising a reference to the source.
            </summary>
            <param name="options">The configuration settings to use to generate the tokens.</param>
            <returns>The tokens comprising a reference to the source..</returns>
        </member>
        <member name="M:SQLGeneration.Builders.AliasedSource.GetSourceName">
            <summary>
            Gets the name used to refer to the source.
            </summary>
            <returns>The name used to refer to the source.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.AliasedSource.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.AliasedSource.Alias">
            <summary>
            Gets the alias for the source.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.ArithmeticExpression">
            <summary>
            Represents an arithmetic expression in a command.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IProjectionItem">
            <summary>
            Represents an item that can appear in the projection-clause of a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IProjectionItem.GetProjectionTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representing the item in a declaration, without the alias.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.IProjectionItem.GetProjectionName">
            <summary>
            Gets the name that a projection will be referred to with.
            </summary>
            <returns>The name -or- null if it doesn't have a name.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.IFilterItem">
            <summary>
            Represents an item that can appear in a filter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IFilterItem.GetFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representing the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.IGroupByItem">
            <summary>
            Represents an item that can appear in a group by clause in a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IGroupByItem.GetGroupByTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representation of the group by.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.ArithmeticExpression.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a ArithmeticExpression.
            </summary>
            <param name="leftHand">The left hand side of the expression.</param>
            <param name="rightHand">The right hand side of the expression.</param>
        </member>
        <member name="M:SQLGeneration.Builders.ArithmeticExpression.GetOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the token representing the arithmetic operator.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The token representing the arithmetic operator.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.ArithmeticExpression.WrapInParentheses">
            <summary>
            Gets or sets whether to wrap the expression in parentheses.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.ArithmeticExpression.LeftHand">
            <summary>
            Gets the left hand operand of the expression.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.ArithmeticExpression.RightHand">
            <summary>
            Gets the right hand operand of the expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.BetweenFilter">
            <summary>
            Represents a comparison that checks that an item is between two values.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Filter">
            <summary>
            Represents a filter in a where clause.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IFilter">
            <summary>
            Adds a condition to a where clause.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IFilter.GetFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representation of the filter.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.IFilter.WrapInParentheses">
            <summary>
            Gets or sets whether to wrap the filter in parentheses.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Filter.#ctor">
            <summary>
            Initializes a new instance of a Filter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Filter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Filter.ShouldWrapInParentheses(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Determines whether the filter should be surrounded by parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>True if the filter should be surround by parentheses; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.Filter.WrapInParentheses">
            <summary>
            Gets or sets whether to wrap the filter in parentheses.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.BetweenFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a NullFilter.
            </summary>
            <param name="value">The item to check whether is within a range.</param>
            <param name="lowerBound">The smallest value the item can be.</param>
            <param name="upperBound">The largest value the item can be.</param>
        </member>
        <member name="M:SQLGeneration.Builders.BetweenFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.BetweenFilter.Value">
            <summary>
            Gets the value being checked.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.BetweenFilter.LowerBound">
            <summary>
            Gets the least the value can be.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.BetweenFilter.UpperBound">
            <summary>
            Gets the most the value can be.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.BetweenFilter.Not">
            <summary>
            Gets or sets whether to negate the results of the filter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.BetweenWindowFrame">
            <summary>
            Defines the limits of a function window whose frame ranges before and after the current row.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.WindowFrame">
            <summary>
            Defines the limits of a function window.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.WindowFrame.#ctor">
            <summary>
            Initializes a new instance of a WindowFrame.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.WindowFrame.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window frame.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the window frame.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.WindowFrame.GetWindowFrameTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window frame.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the window frame.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.WindowFrame.FrameType">
            <summary>
            Gets or sets which keyword to use for the frame.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.BetweenWindowFrame.#ctor(SQLGeneration.Builders.IPrecedingFrame,SQLGeneration.Builders.IFollowingFrame)">
            <summary>
            Initializes a new instance of a BetweenWindowFrame.
            </summary>
            <param name="precedingFrame">The object describing the preceding frame.</param>
            <param name="followingFrame">The object describing the following frame.</param>
        </member>
        <member name="M:SQLGeneration.Builders.BetweenWindowFrame.GetWindowFrameTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window frame.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the window frame.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.BetweenWindowFrame.PrecedingFrame">
            <summary>
            Gets the preceding window frame.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.BetweenWindowFrame.FollowingFrame">
            <summary>
            Gets the following window frame.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.ConditionalCase">
            <summary>
            Represents a conditional statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ConditionalCase.#ctor">
            <summary>
            Initializes a new instance of a ConditionalCase.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ConditionalCase.AddCaseOption(SQLGeneration.Builders.IFilter,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Adds the case option to the case expression.
            </summary>
            <param name="filter">The value that the case item must equal for given the result to be returned.</param>
            <param name="result">The value to return when the item equals the option.</param>
        </member>
        <member name="M:SQLGeneration.Builders.ConditionalCase.RemoveCaseOption(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the case option.
            </summary>
            <param name="filter">The value of the option to be removed.</param>
            <returns>True if a case with the given option was found; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.ConditionalCase.Options">
            <summary>
            Gets the values that the item will be compared to.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.ConditionalCase.Default">
            <summary>
            Gets or sets the default value to return if no options match the item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.MatchCase">
            <summary>
            Represents a conditional statement where an item is matched with another.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.MatchCase.#ctor(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a MatchCase.
            </summary>
            <param name="item">The item that will be matched to the different values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.MatchCase.AddCaseOption(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Adds the case option to the case expression.
            </summary>
            <param name="option">The value that the case item must equal for given the result to be returned.</param>
            <param name="result">The value to return when the item equals the option.</param>
        </member>
        <member name="M:SQLGeneration.Builders.MatchCase.RemoveCaseOption(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Removes the case option.
            </summary>
            <param name="option">The value of the option to be removed.</param>
            <returns>True if a case with the given option was found; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.MatchCase.Item">
            <summary>
            Gets the item that will be compared to the different values.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.MatchCase.Options">
            <summary>
            Gets the values that the item will be compared to.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.MatchCase.Default">
            <summary>
            Gets or sets the default value to return if no options match the item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Column">
            <summary>
            Represents a database column.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Column that is not associated
            with a specific table.
            </summary>
            <param name="name">The name of the column.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Column.#ctor(SQLGeneration.Builders.AliasedSource,System.String)">
            <summary>
            Initializes a new instance of a Column.
            </summary>
            <param name="source">The column source that the column belongs to.</param>
            <param name="name">The name of the column.</param>
        </member>
        <member name="P:SQLGeneration.Builders.Column.Source">
            <summary>
            Gets the table that the column belongs to.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Column.Qualify">
            <summary>
            Gets or sets whether the column should be qualified with the source.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Column.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Modulus">
            <summary>
            Represents the remainder after division in T-SQL systems.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Modulus.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Modulus.
            </summary>
            <param name="leftHand">The left hand side of the expression.</param>
            <param name="rightHand">The right hand side of the expression.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Modulus.GetOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the token representing the arithmetic operator.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The token representing the arithmetic operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.CurrentRowFrame">
            <summary>
            Describes a window frame that is limited to the current row in one direction.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IPrecedingFrame">
            <summary>
            Specifies where a windowed function's frame should start.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IPrecedingFrame.GetFrameTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window frame.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the window frame.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.IFollowingFrame">
            <summary>
            Specifies where a windowed function's frame should stop.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IFollowingFrame.GetFrameTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window frame.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the window frame.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.CurrentRowFrame.#ctor">
            <summary>
            Initializes a new instance of a CurrentRowFrame.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.FrameType">
            <summary>
            Defines which keyword will be used when framing a function window.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.FrameType.Default">
            <summary>
            Specifies that the default frame type will be used, which is ROWS.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.FrameType.Row">
            <summary>
            Specifies that the ROWS keyword will be used.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.FrameType.Range">
            <summary>
            Specifies that the RANGE keyword will be used.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.FrameTypeConverter">
            <summary>
            Converts between representations of frame types.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FrameTypeConverter.#ctor">
            <summary>
            Initializes a new instance of a FrameTypeConverter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FrameTypeConverter.ToToken(SQLGeneration.Builders.FrameType)">
            <summary>
            Converts the given value to its string representation.
            </summary>
            <param name="value">The type of the frame.</param>
            <returns>The string representing the given frame type.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.FunctionWindow">
            <summary>
            Describes the window that a function is applied to.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.#ctor">
            <summary>
            Initializes a new instance of a FunctionWindow.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.AddPartition(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Adds the item as a partitioner.
            </summary>
            <param name="item">The item to partition the records on.</param>
            <returns>An aliased projection wrapping the given item.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.AddPartition(SQLGeneration.Builders.AliasedProjection)">
            <summary>
            Adds the item as a partitioner.
            </summary>
            <param name="item">The aliased projection to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.RemovePartition(SQLGeneration.Builders.AliasedProjection)">
            <summary>
            Removes the item from the partition.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.AddOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Adds the item as a sort condition to the window.
            </summary>
            <param name="orderBy">The order by to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.RemoveOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Removes the item as a sort condition to the window.
            </summary>
            <param name="orderBy">The order by to remove.</param>
            <returns>True if the order by was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FunctionWindow.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window over a function.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the function window.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.FunctionWindow.Partition">
            <summary>
            Gets the items making up the partitioning.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FunctionWindow.OrderBy">
            <summary>
            Gets the order by items.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FunctionWindow.OrderByList">
            <summary>
            Gets the order by items.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FunctionWindow.Frame">
            <summary>
            Gets or sets the window framing.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.BoundFrame">
            <summary>
            Describes a window frame that is limited to a specific number of rows in one direction.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.BoundFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a BoundFrame.
            </summary>
            <param name="rowCount">The limit to the number of rows to include in the frame.</param>
        </member>
        <member name="P:SQLGeneration.Builders.BoundFrame.RowCount">
            <summary>
            Gets the number of rows to include in the frame in one direction.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.UnboundFrame">
            <summary>
            Describes a window frame that is unbounded in one direction.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.UnboundFrame.#ctor">
            <summary>
            Initializes a new instance of an UnboundFrame.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Negation">
            <summary>
            Negates an arithmetic expression.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Negation.#ctor(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Negation.
            </summary>
            <param name="item">The item to negate.</param>
        </member>
        <member name="P:SQLGeneration.Builders.Negation.Item">
            <summary>
            Gets the item that will be negated.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.NotEqualToQuantifierFilter">
            <summary>
            Represents a filter that see that a value is not equal to all or some of the values.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.QuantifierFilter">
            <summary>
            Represents a filter that performs a univeral or existential comparison.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.QuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of a QuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.QuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.QuantifierFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.QuantifierFilter.LeftHand">
            <summary>
            Gets the value being compared to the set of values.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.QuantifierFilter.Quantifier">
            <summary>
            Gets the quantifier being used to compare the items.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.QuantifierFilter.ValueProvider">
            <summary>
            Gets the source of the values.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NotEqualToQuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of an NotEqualToQuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.NotEqualToQuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.LessThanQuantifierFilter">
            <summary>
            Represents a filter that see that a value is less than all or some of the values.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanQuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of an LessThanQuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanQuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.LessThanEqualToQuantifierFilter">
            <summary>
            Represents a filter that see that a value is less than or equal to all or some of the values.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanEqualToQuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of an LessThanEqualToQuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanEqualToQuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.GreaterThanQuantifierFilter">
            <summary>
            Represents a filter that see that a value is greater than all or some of the values.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanQuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of an GreaterThanQuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanQuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.GreaterThanEqualToQuantifierFilter">
            <summary>
            Represents a filter that see that a value is greater than or equal to all or some of the values.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanEqualToQuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of an GreaterThanEqualToQuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanEqualToQuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.DistinctQualifier">
            <summary>
            Specifies how duplicate records will be treated in a SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.DistinctQualifier.Default">
            <summary>
            Specifies that the select statement should use the default rules when handling duplicates.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.DistinctQualifier.All">
            <summary>
            Specifies that the select statement should return duplicate records.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.DistinctQualifier.Distinct">
            <summary>
            Specifies that the select statement should remove duplicate records.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.DistinctQualifierConverter">
            <summary>
            Converts between the DistinctQualifier enumeration and strings.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.DistinctQualifierConverter.#ctor">
            <summary>
            Initializes a new instance of a DistinctQualifierConverter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.DistinctQualifierConverter.ToToken(SQLGeneration.Builders.DistinctQualifier)">
            <summary>
            Gets a string representation of the given distinct qualifier.
            </summary>
            <param name="qualifier">The qualifier to convert to a string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.EqualToQuantifierFilter">
            <summary>
            Represents a filter that see that a value is equal to all or some of the values.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.EqualToQuantifierFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.Quantifier,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new insstance of an EqualToQuantifierFilter.
            </summary>
            <param name="leftHand">The value being compared to the set of values.</param>
            <param name="quantifier">The quantifier to use to compare the value to the set of values.</param>
            <param name="valueProvider">The source of values.</param>
        </member>
        <member name="M:SQLGeneration.Builders.EqualToQuantifierFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the comparison operator applied to the value set.
            </summary>
            <param name="options">The configuration settings to use when building the command.</param>
            <returns>The token representing the comparison operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.ExistsFilter">
            <summary>
            Represents a test for the presence of a record in a sub-query.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ExistsFilter.#ctor(SQLGeneration.Builders.ISelectBuilder)">
            <summary>
            Initializes a new instance of an ExistsFilter.
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:SQLGeneration.Builders.ExistsFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.ExistsFilter.Select">
            <summary>
            Gets the select builder used to test for the existance of a record.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Literal">
            <summary>
            Helps create literals.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Literal.#ctor">
            <summary>
            Initializes a new instance of a Literal.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Literal.GetTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representing the item in a declaration, without the alias.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.PrecedingOnlyWindowFrame">
            <summary>
            Defines the limits of a function window whose frame ranges before the current row.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.PrecedingOnlyWindowFrame.#ctor(SQLGeneration.Builders.IPrecedingFrame)">
            <summary>
            Initializes a new instance of a PrecedingOnlyWindowFrame.
            </summary>
            <param name="precedingFrame">The object describing the preceding frame.</param>
        </member>
        <member name="M:SQLGeneration.Builders.PrecedingOnlyWindowFrame.GetWindowFrameTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens for specifying a window frame.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the window frame.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.PrecedingOnlyWindowFrame.PrecedingFrame">
            <summary>
            Gets the preceding window frame.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Quantifier">
            <summary>
            Represents how a value will be compared to a set of values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Quantifier.All">
            <summary>
            Specifies that a predicate must be satisfied for all values in a set.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Quantifier.Any">
            <summary>
            Specifies that a predicate must be satisfied for at least one value in a set.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Quantifier.Some">
            <summary>
            Specifies that a predicate must be satisfied for at least one value in a set.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.QuantifierConverter">
            <summary>
            Converts between representation of quantifiers.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.QuantifierConverter.#ctor">
            <summary>
            Initializes a new instance of a QuantifierConverter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.QuantifierConverter.ToToken(SQLGeneration.Builders.Quantifier)">
            <summary>
            Converts the given quantifier to its string equivalent.
            </summary>
            <param name="quantifier">The valeu to convert to a string.</param>
            <returns>The token representing the quantifier.</returns>
        </member>
        <member name="T:SQLGeneration.Generators.CommandBuilder">
            <summary>
            Builds an ICommand from a SQL statement.
            </summary>
        </member>
        <member name="T:SQLGeneration.Generators.SqlGenerator">
            <summary>
            Provides the methods that must be overridden in order to properly process SQL expressions.
            </summary>
        </member>
        <member name="M:SQLGeneration.Generators.SqlGenerator.#ctor(SQLGeneration.Parsing.SqlGrammar)">
            <summary>
            Initializes a new instance of a SqlResponder.
            </summary>
            <param name="grammar">The grammar to use.</param>
        </member>
        <member name="M:SQLGeneration.Generators.SqlGenerator.GetResult(SQLGeneration.Parsing.ITokenSource)">
            <summary>
            Extracts expressions from the token stream and calls the corresponding handler.
            </summary>
            <param name="tokenSource">The source of SQL tokens.</param>
            <returns>The results of the parse.</returns>
        </member>
        <member name="P:SQLGeneration.Generators.SqlGenerator.Grammar">
            <summary>
            Gets the grammar.
            </summary>
        </member>
        <member name="M:SQLGeneration.Generators.CommandBuilder.#ctor(SQLGeneration.Parsing.SqlTokenRegistry)">
            <summary>
            Initializes a new instance of a SimpleFormatter.
            </summary>
            <param name="registry">The token registry to use.</param>
        </member>
        <member name="M:SQLGeneration.Generators.CommandBuilder.#ctor(SQLGeneration.Parsing.SqlGrammar)">
            <summary>
            Initializes a new instance of a SimpleFormatter.
            </summary>
            <param name="grammar">The grammar to use.</param>
        </member>
        <member name="M:SQLGeneration.Generators.CommandBuilder.GetCommand(System.String,SQLGeneration.Generators.CommandBuilderOptions)">
            <summary>
            Parses the given command text to build a command builder.
            </summary>
            <param name="commandText">The command text to parse.</param>
            <param name="options">Configures the behavior of the command builder.</param>
            <returns>The command that was parsed.</returns>
        </member>
        <member name="T:SQLGeneration.Generators.CommandBuilderOptions">
            <summary>
            Provides options for customizing the behavior of the command builder.
            </summary>
        </member>
        <member name="P:SQLGeneration.Generators.CommandBuilderOptions.PlaceholderPrefix">
            <summary>
            Specifies a prefix that indicates an identifier is a placeholder.
            </summary>
        </member>
        <member name="T:SQLGeneration.Generators.Formatter">
            <summary>
            Generates simple SQL from a token source.
            </summary>
        </member>
        <member name="M:SQLGeneration.Generators.Formatter.#ctor(SQLGeneration.Parsing.SqlTokenRegistry)">
            <summary>
            Initializes a new instance of a SimpleFormatter.
            </summary>
            <param name="registry">The token registry to use.</param>
        </member>
        <member name="M:SQLGeneration.Generators.Formatter.#ctor(SQLGeneration.Parsing.SqlGrammar)">
            <summary>
            Initializes a new instance of a SimpleFormatter.
            </summary>
            <param name="grammar">The grammar to use.</param>
        </member>
        <member name="M:SQLGeneration.Generators.Formatter.GetCommandText(SQLGeneration.Builders.ICommand,SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the command text.
            </summary>
            <returns>The command text.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.OrderFilter">
            <summary>
            Represents a filter that checks that a value is less than, greater than or equal to.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IComparisonFilter">
            <summary>
            Adds a filter comparison two items together.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.IComparisonFilter.LeftHand">
            <summary>
            Gets the left hand operand of the filter.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.IComparisonFilter.RightHand">
            <summary>
            Gets the right hand operand of the comparison.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.OrderFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a OrderFilter.
            </summary>
            <param name="leftHand">The left hand side of the comparison.</param>
            <param name="rightHand">The right hand side of the comparison.</param>
        </member>
        <member name="M:SQLGeneration.Builders.OrderFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.OrderFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.OrderFilter.LeftHand">
            <summary>
            Gets the left hand operand of the filter.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.OrderFilter.RightHand">
            <summary>
            Gets the right hand operand of the comparison.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.CommandOptions">
            <summary>
            Holds configuration setting for building commands.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.CommandOptions.#ctor">
            <summary>
            Initializes a new instance of a CommandOptions with the default configurations.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.CommandOptions.Clone">
            <summary>
            Creates a copy of the current options.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.IsSelect">
            <summary>
            Gets or sets whether a SELECT command is being built.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.IsInsert">
            <summary>
            Gets or sets whether an INSERT command is being built.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.IsUpdate">
            <summary>
            Gets or sets whether an UPDATE command is being built.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.IsDelete">
            <summary>
            Gets or sets whether a DELETE command is being built.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.AliasProjectionsUsingAs">
            <summary>
            Gets or sets whether to include the optional keyword AS when aliasing projection items.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.AliasColumnSourcesUsingAs">
            <summary>
            Gets or sets whether to include the optional keyword AS when aliasing join items.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.WrapFiltersInParentheses">
            <summary>
            Gets or sets whether to wrap filters in parentheses by default.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.WrapArithmeticExpressionsInParentheses">
            <summary>
            Gets or sets whether to wrap arithmetic expressions in parentheses by default.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.WrapJoinsInParentheses">
            <summary>
            Gets or sets whether to wrap joins in parentheses by default.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.VerboseDeleteStatement">
            <summary>
            Gets or sets whether DELETE statements should print the FROM keyword.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.VerboseInnerJoin">
            <summary>
            Gets or sets whether inner joins should specify INNER explicitly.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.VerboseOuterJoin">
            <summary>
            Gets or sets whether outer joins should specify OUTER explicitly.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.QualifyInsertColumns">
            <summary>
            Gets or sets whether columns should be fully qualified within an INSERT statement.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.QualifyUpdateColumns">
            <summary>
            Gets or sets whether columns should be fully qualified within an UPDATE statement.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.CommandOptions.QualifyDeleteColumns">
            <summary>
            Gets or sets whether columns should be fully qualified within a DELETE statement.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Conjunction">
            <summary>
            Affects the logic of how two filters will be applied.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Conjunction.And">
            <summary>
            Joins two filters with an 'and'.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Conjunction.Or">
            <summary>
            Joins two filters with an 'or'.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.ConjunctionConverter">
            <summary>
            Converts conjunctions to their string representations.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ConjunctionConverter.#ctor">
            <summary>
            Initializes a new instance of a ConjunctionConverter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ConjunctionConverter.ToToken(SQLGeneration.Builders.Conjunction)">
            <summary>
            Gets a string representation of the given conjunction.
            </summary>
            <param name="conjunction">The conjunction to convert to a string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Except">
            <summary>
            Removes the items returned by the second query from the first query.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.SelectCombiner">
            <summary>
            Performs a set operation on the results of two queries.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.ISelectBuilder">
            <summary>
            Builds SELECT statements.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.ICommand">
            <summary>
            Represents a SQL statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ICommand.GetCommandTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the expression making up the command.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The expressions.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.IRightJoinItem">
            <summary>
            Represents the right hand side of a join.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IRightJoinItem.GetSourceName">
            <summary>
            Gets the name of the table -or- null if the item is a SELECT statement.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SQLGeneration.Builders.IRightJoinItem.IsTable">
            <summary>
            Gets whether the join item is a SELECT statement.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IValueProvider">
            <summary>
            Represents a source of values in an insert statement.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.IValueProvider.IsValueList">
            <summary>
            Gets or sets whether the value provider gets its values from a value list.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ISelectBuilder.AddOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Adds a sort criteria to the query.
            </summary>
            <param name="item">The sort criteria to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.ISelectBuilder.RemoveOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Removes the sort criteria from the query.
            </summary>
            <param name="item">The order by item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.ISelectBuilder.Sources">
            <summary>
            Gets the source collection for the builder.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.ISelectBuilder.OrderBy">
            <summary>
            Gets the items used to sort the results.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.ISelectBuilder.OrderByList">
            <summary>
            Gets the order by items.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.SelectCombiner.#ctor(SQLGeneration.Builders.ISelectBuilder,SQLGeneration.Builders.ISelectBuilder)">
            <summary>
            Initializes a new instance of a SelectCombiner.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.SelectCombiner.AddOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Adds a sort criteria to the query.
            </summary>
            <param name="item">The sort criteria to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SelectCombiner.RemoveOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Removes the sort criteria from the query.
            </summary>
            <param name="item">The order by item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectCombiner.SQLGeneration#Builders#ICommand#GetCommandTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the command expression.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The expression making up the command.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectCombiner.GetCombinationType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Retrieves the text used to combine two queries.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The text used to combine two queries.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.SelectCombiner.LeftHand">
            <summary>
            Gets the SELECT command on the left side.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectCombiner.RightHand">
            <summary>
            Gets the SELECT comman on the right side.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectCombiner.Distinct">
            <summary>
            Gets the distinct qualifier for the combiner.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectCombiner.OrderBy">
            <summary>
            Gets the items used to sort the results.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Except.#ctor(SQLGeneration.Builders.ISelectBuilder,SQLGeneration.Builders.ISelectBuilder)">
            <summary>
            Initializes a new instance of a Except.
            </summary>
            <param name="leftHand">The left hand SELECT command.</param>
            <param name="rightHand">The right hand SELECT command.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Except.GetCombinationType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Retrieves the text used to combine two queries.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The text used to combine two queries.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.CrossJoin">
            <summary>
            Represents a cross join.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.BinaryJoin">
            <summary>
            Represents a join between two tables or sub-queries.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Join">
            <summary>
            Represents a portion of a series of joins.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Join.#ctor(SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a Join.
            </summary>
            <param name="source">The source for the current </param>
        </member>
        <member name="M:SQLGeneration.Builders.Join.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a Join.
            </summary>
            <param name="other">The previous join in the sequence.</param>
            <param name="source">The source for the current </param>
        </member>
        <member name="M:SQLGeneration.Builders.Join.From(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Starts creating a BinaryJoin.
            </summary>
            <param name="source">The table or select statement to start the join series with.</param>
            <param name="alias">The alias to give the item.</param>
            <returns>The first join item.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Join.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string that declares the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string declaring the item.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Join.InnerJoin(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Creates a new join where the given item is inner joined with the existing join items.
            </summary>
            <param name="item">The item to join with.</param>
            <param name="alias">The alias to give the item.</param>
            <returns>The new join.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Join.LeftOuterJoin(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Creates a new join where the given item is left outer joined with the existing join items.
            </summary>
            <param name="item">The item to join with.</param>
            <param name="alias">The alias to give the item.</param>
            <returns>The new join.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Join.RightOuterJoin(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Creates a new join where the given item is right outer joined with the existing join items.
            </summary>
            <param name="item">The item to join with.</param>
            <param name="alias">The alias to give the item.</param>
            <returns>The new join.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Join.FullOuterJoin(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Creates a new join where the given item is full outer joined with the existing join items.
            </summary>
            <param name="item">The item to join with.</param>
            <param name="alias">The alias to give the item.</param>
            <returns>The new join.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Join.CrossJoin(SQLGeneration.Builders.IRightJoinItem,System.String)">
            <summary>
            Creates a new join where the given item is cross joined with the existing join items.
            </summary>
            <param name="item">The item to join with.</param>
            <param name="alias">The alias to give the item.</param>
            <returns>The new join.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.Join.WrapInParentheses">
            <summary>
            Gets or sets whether the join should be wrapped in parentheses.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Join.Sources">
            <summary>
            Gets a collection of the table and SELECT statements within the join.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.BinaryJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a BinaryJoin.
            </summary>
            <param name="leftHand">The left hand item or join.</param>
            <param name="rightHand">The right hand item in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.BinaryJoin.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string that declares the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string declaring the item.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.BinaryJoin.GetOnTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the ON expression for the join.
            </summary>
            <param name="options">The configuration settings to use.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.BinaryJoin.GetJoinType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the name of the join type.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The name of the join type.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.BinaryJoin.LeftHand">
            <summary>
            Gets the item on the left hand side of the join.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.BinaryJoin.RightHand">
            <summary>
            Gets the table on the right hand side of the join.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.CrossJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a CrossJoin.
            </summary>
            <param name="leftHand">The left hand item in the join.</param>
            <param name="rightHand">The right hand table in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.CrossJoin.GetOnTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the ON expression for the join.
            </summary>
            <param name="options">The configuration settings to use.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.CrossJoin.GetJoinType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the name of the join type.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The name of the join type.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.DeleteBuilder">
            <summary>
            Builds a string of a delete statement.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.IFilteredCommand">
            <summary>
            Represents a command that can be filtered.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.IFilteredCommand.AddWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the where clause.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.IFilteredCommand.RemoveWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the where clause.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.IFilteredCommand.Where">
            <summary>
            Gets the filters in the where clause.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.DeleteBuilder.#ctor(SQLGeneration.Builders.Table,System.String)">
            <summary>
            Initializes a new instance of a DeleteBuilder.
            </summary>
            <param name="table">The table being deleted from.</param>
            <param name="alias">The alias to use to refer to the table.</param>
        </member>
        <member name="M:SQLGeneration.Builders.DeleteBuilder.AddWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the where clause.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.DeleteBuilder.RemoveWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the where clause.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.DeleteBuilder.SQLGeneration#Builders#ICommand#GetCommandTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the command, formatting it using the given options.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The command text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.DeleteBuilder.Table">
            <summary>
            Gets the table being deleted from.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.DeleteBuilder.Where">
            <summary>
            Gets the filters in the where clause.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.DeleteBuilder.WhereFilterGroup">
            <summary>
            Gets the filter group used to build the where clause.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Division">
            <summary>
            Represents the division of two items in a command.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Division.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Division.
            </summary>
            <param name="leftHand">The left hand side of the expression.</param>
            <param name="rightHand">The right hand side of the expression.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Division.GetOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the token representing the arithmetic operator.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The token representing the arithmetic operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.FilteredJoin">
            <summary>
            Represents a join that is filtered with an ON expression.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FilteredJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a FilteredJoin.
            </summary>
            <param name="left">The left hand item in the join.</param>
            <param name="right">The right hand item in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.FilteredJoin.On(System.Func{SQLGeneration.Builders.Join,SQLGeneration.Builders.IFilter})">
            <summary>
            Sets the condition on which the source is joined with the other tables.
            </summary>
            <param name="filterGenerator">A function that creates the join.</param>
            <returns>The current join.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FilteredJoin.AddOnFilter(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the group.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.FilteredJoin.RemoveOnFilter(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the group.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FilteredJoin.GetOnTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the ON expression for the join.
            </summary>
            <param name="options">The configuration settings to use.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.FilteredJoin.OnFilters">
            <summary>
            Gets the filters by which the left and right hand items are joined.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FilteredJoin.OnFilterGroup">
            <summary>
            Gets the filter group.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.JoinStart">
            <summary>
            Represents the first source in a series of joins.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.JoinStart.#ctor(SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a JoinStart.
            </summary>
            <param name="source">The first source in a series of joins.</param>
        </member>
        <member name="M:SQLGeneration.Builders.JoinStart.GetDeclarationTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string that declares the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string declaring the item.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.JoinStart.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.NotFilter">
            <summary>
            Logically negates another filter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NotFilter.#ctor(SQLGeneration.Builders.IFilter)">
            <summary>
            Initializes a new instance of a NotFilter.
            </summary>
            <param name="filter">The filter to negate.</param>
        </member>
        <member name="M:SQLGeneration.Builders.NotFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.NotFilter.Filter">
            <summary>
            Gets the filter that will be negated.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.ExpressionDefinition">
            <summary>
            Represents a sequence of tokens and sub-expressions.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.ExpressionDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of an ExpressionDefinition.
            </summary>
            <param name="expressionType">An optional identifier for the expression's type.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.ExpressionDefinition.Add(System.String,System.Boolean,SQLGeneration.Parsing.Expression)">
            <summary>
            Indicates that the given expression is expected next, giving it a
            name and specifying whether it is required.
            </summary>
            <param name="name">The name that the expression will be identified with in the outer expression.</param>
            <param name="isRequired">Indicates whether the expression is required in order for the outer expression to be a match.</param>
            <param name="expression">The expression to add to the outer expressions.</param>
            <returns>The updated definition.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.ExpressionDefinition.Add(System.Boolean,SQLGeneration.Parsing.Options)">
            <summary>
            Indicates that the given options list is the next expected, giving it a
            name and specifying whether it is required.
            </summary>
            <param name="isRequired">Indicates whether at least one of the options is required in order for the outer expression to be a match.</param>
            <param name="options">The options to add to the outer expression.</param>
            <returns>The updated definition.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.ExpressionDefinition.Add(System.String,System.Boolean,SQLGeneration.Parsing.Token)">
            <summary>
            Indicates that the given token is the next expected, giving it a
            name and specifying whether it is required.
            </summary>
            <param name="itemName">The name that the token will be identified with in the outer expression.</param>
            <param name="isRequired">Indicates whether the token is required in order for the outer expression to be a match.</param>
            <param name="token">The token to add to the outer expression.</param>
            <returns>The updated definition.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.ExpressionDefinition.Add(System.String,System.Boolean,SQLGeneration.Parsing.ExpressionDefinition)">
            <summary>
            Indicates that the given sub-expression is the next expected, giving it a
            name and specifying whether it is required.
            </summary>
            <param name="itemName">The name that the sub-expression will be identified with in the outer expression.</param>
            <param name="isRequired">Indicates whether the sub-expression is required in order for the expression to match.</param>
            <param name="definition">The definition for the sub-expression.</param>
            <returns>The updated definition.</returns>
        </member>
        <member name="P:SQLGeneration.Parsing.ExpressionDefinition.ExpressionType">
            <summary>
            Gets the type of the expression.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.ExpressionDefinition.Items">
            <summary>
            Gets the items making up the expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.Expression">
            <summary>
            Represents a sub-expression made up of tokens and sub-expressions.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.IExpressionItem">
            <summary>
            Represents an item in a grammar expression.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.IExpressionItem.Match(SQLGeneration.Parsing.IParseAttempt,System.String)">
            <summary>
            Attempts to match the expression item with the values returned by the parser.
            </summary>
            <param name="parser">The parser currently iterating over the token source.</param>
            <param name="itemName">The name of the item in the outer expression.</param>
            <returns>The results of the match.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Expression.#ctor(SQLGeneration.Parsing.ExpressionDefinition)">
            <summary>
            Initializes a new instance of an Expression.
            </summary>
            <param name="expression">The sequence of tokens and sub-expressions expected to appear.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Expression.Match(SQLGeneration.Parsing.IParseAttempt,System.String)">
            <summary>
            Attempts to match the expression item with the values returned by the parser.
            </summary>
            <param name="attempt">The parser currently iterating over the token source.</param>
            <param name="itemName">The name of the item in the outer expression.</param>
            <returns>The results of the match.</returns>
        </member>
        <member name="T:SQLGeneration.Parsing.ExpressionItem">
            <summary>
            Holds information descibing an expression or token's role in an outer expression.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.ExpressionItem.#ctor(System.String,System.Boolean,SQLGeneration.Parsing.IExpressionItem)">
            <summary>
            Initializes a new instance of an ExpressionItem.
            </summary>
            <param name="itemName">The name of the item.</param>
            <param name="isRequired">Specifies whether the item missing results in the outer expression not matching.</param>
            <param name="item">The actual item that is expected.</param>
        </member>
        <member name="P:SQLGeneration.Parsing.ExpressionItem.ItemName">
            <summary>
            Gets the name that the outer expression refers to the item with.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.ExpressionItem.IsRequired">
            <summary>
            Gets whether the item is required in order for the outer expression to match.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.ExpressionItem.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.Grammar">
            <summary>
            Specifies the expressions making up a syntax.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.#ctor(SQLGeneration.Parsing.TokenRegistry)">
            <summary>
            Initializes a new instance of a Grammar, initially empty.
            </summary>
            <param name="tokenRegistry">The token registry to use to verify referenced tokens types are defined.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.Define">
            <summary>
            Creates a sub-expression definition.
            </summary>
            <returns>The expression definition to allow for configuration.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.Define(System.String)">
            <summary>
            Creates or retrieves the expression definition associated with the given name.
            </summary>
            <param name="type">The identifier to use to refer to the expression type later.</param>
            <returns>The expression definition to allow for configuration.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.Token(System.String)">
            <summary>
            Gets a placeholder to indicate that a token is expected next in an expression.
            </summary>
            <param name="tokenName">The type of the token that is expected.</param>
            <returns>The token placeholder.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.Token(System.String,System.String)">
            <summary>
            Gets a placeholder to indicate that a token is expected next in an expression.
            </summary>
            <param name="tokenName">The type of the token that is expected.</param>
            <param name="expectedValue">The expected value of the token.</param>
            <returns>The token placeholder.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.Options">
            <summary>
            Gets a placeholder to indicate that one of many expressions is next in an expression.
            </summary>
            <returns>The options placeholder.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Grammar.Expression(System.String)">
            <summary>
            Gets a placeholder to indicate that one of many expressions is next in an expression.
            </summary>
            <param name="type">The type of the expression for future reference.</param>
            <returns>The options placeholder.</returns>
        </member>
        <member name="P:SQLGeneration.Parsing.Grammar.TokenRegistry">
            <summary>
            Gets the token registery being used.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.Grammar.Definitions">
            <summary>
            Gets the definitions comprising the grammar.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.IParseAttempt">
            <summary>
            Represents an attempt to parse an expression.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.IParseAttempt.GetToken">
            <summary>
            Attempts to get a token of the given type.
            </summary>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.IParseAttempt.Attempt">
            <summary>
            Creates an attempt to parse a child expression.
            </summary>
            <returns>A new attempt object.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.IParseAttempt.Accept(SQLGeneration.Parsing.IParseAttempt)">
            <summary>
            Accepts the attempt as a successful parse, joining the given attempt's tokens
            with the current attempt's.
            </summary>
            <param name="attempt">The child attempt to accept.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.IParseAttempt.Reject">
            <summary>
            Rejects the attempt as a failed parse, returning the attempt's token
            to the token stream.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.IParseAttempt.Tokens">
            <summary>
            Gets the tokens that were collected during the attempt.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.ITokenRegistry">
            <summary>
            Indicates whether a token has been registered.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.ITokenRegistry.IsRegistered(System.String)">
            <summary>
            Gets whether a token with the given name has been registered.
            </summary>
            <param name="tokenName">The name of the token to search for.</param>
            <returns>True if the token has been registered; otherwise, false.</returns>
        </member>
        <member name="T:SQLGeneration.Parsing.ITokenSource">
            <summary>
            Retrieves tokens and provides the ability to return them if they can't be used.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.ITokenSource.GetToken">
            <summary>
            Attempts to retrieve a token matching the definition associated
            with the given name.
            </summary>
            <returns>
            A result object describing the token that was found -or- null if no more tokens are found.
            </returns>
        </member>
        <member name="M:SQLGeneration.Parsing.ITokenSource.PutBack(SQLGeneration.Parsing.TokenResult)">
            <summary>
            Restores the given token to the front of the token stream.
            </summary>
            <param name="result">The token to restore.</param>
        </member>
        <member name="T:SQLGeneration.Parsing.MatchResult">
            <summary>
            Holds the result of trying to match an expression item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.MatchResult.#ctor">
            <summary>
            Initializes a new instance of a MatchResult.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.MatchResult.ItemName">
            <summary>
            Gets the name of the item as it will be referred to in the outer expression.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.MatchResult.IsMatch">
            <summary>
            Gets whether the expression item was matched against the parser.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.MatchResult.Context">
            <summary>
            Gets any information to be passed along with the match results.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.MatchResult.Matches">
            <summary>
            Gets the match result for sub-expressions or tokens within the current expression.
            This collection will be empty for tokens.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.MatchResultCollection">
            <summary>
            Holds the match results of the items found under an expression item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.MatchResultCollection.#ctor">
            <summary>
            Initializes a new instance of a MatchResultCollection.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.MatchResultCollection.Add(SQLGeneration.Parsing.MatchResult)">
            <summary>
            Associates the given result to its name.
            </summary>
            <param name="result">The match result of an item.</param>
        </member>
        <member name="P:SQLGeneration.Parsing.MatchResultCollection.Item(System.String)">
            <summary>
            Gets the match result for the item with the given name.
            </summary>
            <param name="itemName">The name of the item to get the results for.</param>
            <returns>The match result for the item with the given name -or- an empty MatchResult.</returns>
        </member>
        <member name="T:SQLGeneration.Parsing.Options">
            <summary>
            Represents a list of possible expressions or tokens that the parser should try.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.Options.#ctor">
            <summary>
            Initializes a new instance of an Options.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.Options.Add(System.String,SQLGeneration.Parsing.IExpressionItem)">
            <summary>
            Indicates that the given item is the next expected, giving it a
            name and specifying whether it is required.
            </summary>
            <param name="itemName">The name that the token will be identified with in the outer expression.</param>
            <param name="item">The expression item to add to the sequence.</param>
            <returns>The updated expression.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Options.Add(System.String,SQLGeneration.Parsing.ExpressionDefinition)">
            <summary>
            Indicates that the given sub-expression is the next expected, giving it a
            name and specifying whether it is required.
            </summary>
            <param name="itemName">The name that the token will be identified with in the outer expression.</param>
            <param name="definition">The definition for the sub-expression.</param>
            <returns>The updated expression.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Options.Match(SQLGeneration.Parsing.IParseAttempt,System.String)">
            <summary>
            Attempts to match the expression item with the values returned by the parser.
            </summary>
            <param name="attempt">The parser currently iterating over the token source.</param>
            <param name="itemName">This value will be empty for an options list.</param>
            <returns>The results of the match.</returns>
        </member>
        <member name="P:SQLGeneration.Parsing.Options.Items">
            <summary>
            Gets the option items.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.Parser">
            <summary>
            Parses a sequence of tokens using a grammar, applying actions to matching sequences.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.#ctor(SQLGeneration.Parsing.Grammar)">
            <summary>
            Initializes a new instance of a Parser.
            </summary>
            <param name="grammar">The grammar to use.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.RegisterTokenHandle(System.Action{SQLGeneration.Parsing.TokenResult,System.Object})">
            <summary>
            Registers the given handler to run when a token is matched.
            </summary>
            <param name="handler">The function to call when a token is matched.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.RegisterHandler(System.String,System.Action{SQLGeneration.Parsing.MatchResult,System.Object})">
            <summary>
            Registers the given handler to run when the given expression type is matched.
            </summary>
            <param name="expressionType">The type of the expression item to handle.</param>
            <param name="handler">The function to call when the expression type is matched.</param>
            <remarks>If a handler is already registered, it will be replaced.</remarks>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.Parse(System.String,SQLGeneration.Parsing.ITokenSource)">
            <summary>
            Parses the given token source using the specified grammar, starting with
            expression with the given name.
            </summary>
            <param name="expressionType">The type of the expression to start parsing.</param>
            <param name="tokenSource">The source of tokens.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.ParseAttempt.#ctor(SQLGeneration.Parsing.Parser,SQLGeneration.Parsing.ITokenSource)">
            <summary>
            Initializes a new instance of a ParseAttempt.
            </summary>
            <param name="parser">The parser containing</param>
            <param name="tokenSource">An object to retrieve the sequence of tokens from.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.ParseAttempt.GetToken">
            <summary>
            Attempts to get a token of the given type.
            </summary>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.ParseAttempt.Attempt">
            <summary>
            Creates an attempt to parse a child expression.
            </summary>
            <returns>A new attempt object.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.ParseAttempt.Accept(SQLGeneration.Parsing.IParseAttempt)">
            <summary>
            Accepts the attempt as a successful parse, joining the given attempt's tokens
            with the current attempt's.
            </summary>
            <param name="attempt">The child attempt to accept.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Parser.ParseAttempt.Reject">
            <summary>
            Rejects the attempt as a failed parse, returning the attempt's token
            to the token stream.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.Parser.ParseAttempt.Tokens">
            <summary>
            Gets the tokens collected during the attempt.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar">
            <summary>
            Identifies the expressions making up a SQL statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.SqlGrammar.#ctor(SQLGeneration.Parsing.SqlTokenRegistry)">
            <summary>
            Initializes a new instance of a SqlGrammar.
            </summary>
            <param name="registry">The token registry to retrieve SQL tokens from.</param>
        </member>
        <member name="P:SQLGeneration.Parsing.SqlGrammar.Default">
            <summary>
            Gets the default instance of the SqlGrammar.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Start">
            <summary>
            Describes the structure of the top-level SQL grammar.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Start.Name">
            <summary>
            Gets the identifier representing the start expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Start.SelectStatement">
            <summary>
            Gets the name for the SELECT statement option.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Start.InsertStatement">
            <summary>
            Gets the name for the INSERT statement option.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Start.UpdateStatement">
            <summary>
            Gets the name for the UPDATE statement option.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Start.DeleteStatement">
            <summary>
            Gets the name for the DELETE statement option.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectStatement">
            <summary>
            Describes the structure of the SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectStatement.Name">
            <summary>
            Gets the identifier representing the SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectStatement.SelectExpression">
            <summary>
            Gets the name of the SELECT expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectStatement.OrderBy">
            <summary>
            Describes the structure of the optional ORDER BY clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectStatement.OrderBy.Name">
            <summary>
            Gets the identifier representing the ORDER BY clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectStatement.OrderBy.OrderByKeyword">
            <summary>
            Gets the name representing the ORDER BY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectStatement.OrderBy.OrderByList">
            <summary>
            Gets the name representing the ORDER BY list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectExpression">
            <summary>
            Describes the structure of the SELECT expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Name">
            <summary>
            Gets the name identifying the SELECT expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.SelectSpecification">
            <summary>
            Gets the SELECT specification identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Wrapped">
            <summary>
            Describes the structure of the leading SELECT expression when it is surrounded by parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Wrapped.Name">
            <summary>
            Gets the name identifying the leading SELECT expression when it is surrounded by parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Wrapped.LeftParenthesis">
            <summary>
            Gets the left parenthesis identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Wrapped.SelectExpression">
            <summary>
            Gets the SELECT expression identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Wrapped.RightParenthesis">
            <summary>
            Gets the right parenthesis identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Remaining">
            <summary>
            Describes the structure of a compound SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Remaining.Name">
            <summary>
            Gets the identifier for a compound SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Remaining.Combiner">
            <summary>
            Gets the SELECT statement combiner identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Remaining.DistinctQualifier">
            <summary>
            Gets the identifier for the distinct qualifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectExpression.Remaining.SelectExpression">
            <summary>
            Gets the SELECT expression identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectCombiner">
            <summary>
            Describes the options for a SELECT combiner.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectCombiner.Name">
            <summary>
            Gets the identifier indicating that the token is a SELECT combiner.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectCombiner.Union">
            <summary>
            Gets the identifier for the UNION keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectCombiner.Intersect">
            <summary>
            Gets the identifier for the INTERSECT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectCombiner.Except">
            <summary>
            Gets the identifier for the EXCEPT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectCombiner.Minus">
            <summary>
            Gets the identifier for the MINUS keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectSpecification">
            <summary>
            Describes the structure of the SELECT specification.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Name">
            <summary>
            Gets the name identifying the SELECT specification.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.SelectKeyword">
            <summary>
            Gets the SELECT keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.DistinctQualifier">
            <summary>
            Gets the distinct qualifier identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.ProjectionList">
            <summary>
            Get the projection list identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Top">
            <summary>
            Describes the structure of the TOP clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Top.Name">
            <summary>
            Gets the identifier for the TOP expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Top.TopKeyword">
            <summary>
            Gets the TOP keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Top.Expression">
            <summary>
            Gets the expression identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Top.PercentKeyword">
            <summary>
            Gets the PERCENT keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Top.WithTiesKeyword">
            <summary>
            Gets the WITH TIES keyword identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.From">
            <summary>
            Describes the structure of the FROM clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.From.Name">
            <summary>
            Gets the identifier for the FROM expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.From.FromKeyword">
            <summary>
            Gets the FROM keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.From.FromList">
            <summary>
            Gets the from list identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Where">
            <summary>
            Describes the structure of the WHERE clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Where.Name">
            <summary>
            Get the identifier for the WHERE clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Where.WhereKeyword">
            <summary>
            Gets the WHERE keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Where.FilterList">
            <summary>
            Gets the filter list identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.GroupBy">
            <summary>
            Describes the structure of the GROUP BY clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.GroupBy.Name">
            <summary>
            Gets the identifier for the GROUP BY clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.GroupBy.GroupByKeyword">
            <summary>
            Gets the GROUP BY keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.GroupBy.GroupByList">
            <summary>
            Gets the group by list identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Having">
            <summary>
            Describes the structure of the HAVING clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Having.Name">
            <summary>
            Gets the identifier for the HAVING clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Having.HavingKeyword">
            <summary>
            Gets the HAVING keyword identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SelectSpecification.Having.FilterList">
            <summary>
            Gets the filter list identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.DistinctQualifier">
            <summary>
            Describes the options for a distinct qualifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DistinctQualifier.Name">
            <summary>
            Gets the identifier indicating that the token is a distinct qualifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DistinctQualifier.Distinct">
            <summary>
            Gets the identifier for the DISTINCT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DistinctQualifier.All">
            <summary>
            Gets the identifier for the ALL keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrderByList">
            <summary>
            Describes the structure of the ORDER BY list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByList.Name">
            <summary>
            Gets the name identifying the ORDER BY list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByList.Single">
            <summary>
            Gets the identifier for a single order by item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrderByList.Multiple">
            <summary>
            Describes the structure of an order by list containing multiple items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByList.Multiple.Name">
            <summary>
            Gets the identifier for the multiple option.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByList.Multiple.First">
            <summary>
            Gets the first order by item identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByList.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the order by list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrderByItem">
            <summary>
            Describes the structure of the ORDER BY item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByItem.Name">
            <summary>
            Gets the name identifying the ORDER BY item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByItem.Expression">
            <summary>
            Gets the identifier for the item being ordered.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByItem.OrderDirection">
            <summary>
            Gets the identifier for the direction specifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderByItem.NullPlacement">
            <summary>
            Gets the identifier for the null placement specifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrderDirection">
            <summary>
            Describes the options for an ORDER BY direction.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderDirection.Name">
            <summary>
            Gets the identifier indicating that the token is an ORDER direction.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderDirection.Descending">
            <summary>
            Gets the identifier for the DESC keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrderDirection.Ascending">
            <summary>
            Gets the identifier for the ASC keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.NullPlacement">
            <summary>
            Describes the options for null placement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.NullPlacement.Name">
            <summary>
            Gets the identifier indicating that the token is a null placement keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.NullPlacement.NullsFirst">
            <summary>
            Gets the identifier for the NULLS FIRST keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.NullPlacement.NullsLast">
            <summary>
            Gets the identifier for the NULLS LAST keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression">
            <summary>
            Describes the structure of an arithmetic expression adding or substracting two values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Name">
            <summary>
            Gets the identifier indicating that the expression adds or substracts two values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Single">
            <summary>
            Gets the identifier indicating that the expression is a single value, a multiplication or division.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Multiple">
            <summary>
            Describes the structure of a additive expression adding or substracting multiple values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Multiple.Name">
            <summary>
            Gets the identifier indicating that the expression is adding or subtracting multiple values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Multiple.First">
            <summary>
            Gets the identifier for the first operand.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Multiple.Operator">
            <summary>
            Gets the identfier for the operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveExpression.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the arithmetic expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.AdditiveOperator">
            <summary>
            Describes the structure of an arithmetic operator doing addition or subtraction.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveOperator.Name">
            <summary>
            Gets the identifier indicating that the operator is addition or subtraction.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveOperator.PlusOperator">
            <summary>
            Gets the identifier for the addition operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AdditiveOperator.MinusOperator">
            <summary>
            Gets the identifier for the subtraction operator.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression">
            <summary>
            Describes the structure of an arithmetic expression multiplying or dividing values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Name">
            <summary>
            Gets the identifier indicating that there are values being multiplied or divided.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Single">
            <summary>
            Gets the identifier for a single item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Multiple">
            <summary>
            Describes the structure of an expression when multiple values are being multiplied and divided together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Multiple.Name">
            <summary>
            Gets the identifier indicating that multiple values are being multiplied or divided together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Multiple.First">
            <summary>
            Gets the identifier for the first operand.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Multiple.Operator">
            <summary>
            Gets the identifier for the operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveExpression.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the arithmetic expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveOperator">
            <summary>
            Describes the structure of a multiplicitive operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveOperator.Name">
            <summary>
            Gets the identifier indicating that the operator is multiplication or division.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveOperator.Multiply">
            <summary>
            Gets the identifier indicating that the operation is multiplication.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveOperator.Divide">
            <summary>
            Gets the identifier indicating that the operation is division.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultiplicitiveOperator.Modulus">
            <summary>
            Gets the identfier indicating that the operation is modulus.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionList">
            <summary>
            Describes the structure of the projection list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Name">
            <summary>
            Gets the name identifying the projection list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Single">
            <summary>
            Gets the identifier indicating that there is one item in the projection list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Multiple">
            <summary>
            Describes the structure of a projection list containing multiple items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Multiple.Name">
            <summary>
            Gets the identifier indicating that the projection list contains multiple items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Multiple.First">
            <summary>
            Gets the identifier for the first projection item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionList.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the projection list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionItem">
            <summary>
            Describes the structure of the projection item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Name">
            <summary>
            Gets the name identifying the projection item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star">
            <summary>
            Describes the structure of the projection item when it is a star (*).
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star.Name">
            <summary>
            Gets the identifier indicating that the projection item is a star (*).
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star.StarToken">
            <summary>
            Gets the identifier for the star (*) token.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star.Qualifier">
            <summary>
            Describes the structure of a star projection item (*) that is qualified.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star.Qualifier.Name">
            <summary>
            Gets the identifier indicating that the star projection item (*) is qualified.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star.Qualifier.ColumnSource">
            <summary>
            Gets the identifier for the qualifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Star.Qualifier.Dot">
            <summary>
            Gets the identifier for the dot separator.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression">
            <summary>
            Describes the structure of a projection item when it is a column, function call, SELECT statement or arithmetic expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression.Name">
            <summary>
            Gets the identifier indicating that the expression is a column, function call, SELECT statement of arithmetic expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression.Item">
            <summary>
            Gets the identifier for the item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression.AliasExpression">
            <summary>
            Describes the structure of an alias of a projection item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression.AliasExpression.Name">
            <summary>
            Gets the identifier indicating that the projection item has an alias.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression.AliasExpression.AliasIndicator">
            <summary>
            Gets the identifier for the AS token.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ProjectionItem.Expression.AliasExpression.Alias">
            <summary>
            Gets the identifier for the alias.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FromList">
            <summary>
            Describes the structure of the FROM list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FromList.Name">
            <summary>
            Gets the name identifying the FROM list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FromList.Single">
            <summary>
            Gets the identifier indicating that the list only has one source.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FromList.Multiple">
            <summary>
            Describes the structure of multiple sources in a FROM clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FromList.Multiple.Name">
            <summary>
            Gets the identifier indicating that the list contains multiple sources.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FromList.Multiple.First">
            <summary>
            Gets the identifier for the first source.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FromList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FromList.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the sources.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinItem">
            <summary>
            Describes the structure of the join item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.Name">
            <summary>
            Gets the name identifying the join item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.Table">
            <summary>
            Gets the identifier indicating that the join item is a table.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.FunctionCall">
            <summary>
            Gets the identifier indicating that the join item is a function call.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinItem.Select">
            <summary>
            Describes the structure of a select statement as a table source.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.Select.Name">
            <summary>
            Gets the identifier indicating that the table source is a select statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.Select.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.Select.SelectStatement">
            <summary>
            Gets the identifier for the select statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.Select.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinItem.AliasExpression">
            <summary>
            Describes the structure of the join item alias.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.AliasExpression.Name">
            <summary>
            Gets the identifier indicating that the join item is aliased.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.AliasExpression.AliasIndicator">
            <summary>
            Gets the identifier for the alias indicator (AS).
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinItem.AliasExpression.Alias">
            <summary>
            Gets the identifier for the alias.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FunctionCall">
            <summary>
            Describes the structure of the function call.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Name">
            <summary>
            Gets the name identifying the function call.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.FunctionName">
            <summary>
            Gets the identifier for the function name.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.LeftParethesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Arguments">
            <summary>
            Gets the identifier for the function arguments.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window">
            <summary>
            Describes the structure of an analytical function window specification.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Name">
            <summary>
            Gets the identifier indicating that function has windowing applied to it.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Over">
            <summary>
            Gets the identifier for the OVER keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis surrounding the window specification.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis surrounding the window specification.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Partitioning">
            <summary>
            Describes the structure of a partitioned window.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Partitioning.Name">
            <summary>
            Gets the identifier indicating that the window is partitioned.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Partitioning.PartitionBy">
            <summary>
            Gets the identifier for the PARTITION BY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Partitioning.ValueList">
            <summary>
            Gets the identifier for the value list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Ordering">
            <summary>
            Describes the structure of an ordered window.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Ordering.Name">
            <summary>
            Gets the identifier indicating that the window is ordered.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Ordering.OrderByKeyword">
            <summary>
            Gets the identifier for the ORDER BY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Ordering.OrderByList">
            <summary>
            Gets the identifier for the ORDER BY list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing">
            <summary>
            Describes the structure of a window that frames its partitions.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.Name">
            <summary>
            Gets the identifier indicating that the window uses framed.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.FrameType">
            <summary>
            Gets the identifier for the frame type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.PrecedingFrame">
            <summary>
            Gets the identifier indicating that the frame is determined by preceding items only.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.BetweenFrame">
            <summary>
            Describes the structure of a window frame that exists within a range of rows.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.BetweenFrame.Name">
            <summary>
            Gets the identifier indicating that the frame exists within a range of rows.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.BetweenFrame.BetweenKeyword">
            <summary>
            The identifier for the BETWEEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.BetweenFrame.PrecedingFrame">
            <summary>
            Gets the identifier for the preceding frame.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.BetweenFrame.AndKeyword">
            <summary>
            Gets the identifier for the AND keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FunctionCall.Window.Framing.BetweenFrame.FollowingFrame">
            <summary>
            Gets the keyword for the following frame."
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FrameType">
            <summary>
            Describes the options for a frame type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FrameType.Name">
            <summary>
            Gets the identifier for the frame type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FrameType.Rows">
            <summary>
            Gets the identifier for the ROWS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FrameType.Range">
            <summary>
            Gets the identifier for the RANGE keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame">
            <summary>
            Describes the structure of a preceding frame in a windowed function.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.Name">
            <summary>
            Gets the identifier indicating there's a preceding frame.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.CurrentRow">
            <summary>
            Gets the identifier indicating that the windowed function should apply to a range
            starting with the current row.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.UnboundedPreceding">
            <summary>
            Describes the structure of a preceding window without a bound.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.UnboundedPreceding.Name">
            <summary>
            Gets the identifier indicating that the preceding window is unbounded.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.UnboundedPreceding.UnboundedKeyword">
            <summary>
            Gets the identifier for the UNBOUNDED keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.UnboundedPreceding.PrecedingKeyword">
            <summary>
            Gets the identifier for the PRECEDING keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.BoundedPreceding">
            <summary>
            Describes the structure of a preceding window with a bound.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.BoundedPreceding.Name">
            <summary>
            Gets the identifier indicating that the preceding window is bounded.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.BoundedPreceding.Number">
            <summary>
            Gets the identifier for the number of items in the preceding window.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.PrecedingFrame.BoundedPreceding.PrecedingKeyword">
            <summary>
            Gets the identifier for the PRECEDING keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FollowingFrame">
            <summary>
            Describes the structure of a following frame in a windowed function.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.Name">
            <summary>
            Gets the identifier indicating there's a following frame.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.CurrentRow">
            <summary>
            Gets the identifier indicating that the windowed function should apply to a range
            stoping with the current row.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.UnboundedFollowing">
            <summary>
            Describes the structure of a following window without a bound.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.UnboundedFollowing.Name">
            <summary>
            Gets the identifier indicating that the following window is unbounded.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.UnboundedFollowing.UnboundedKeyword">
            <summary>
            Gets the identifier for the UNBOUNDED keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.UnboundedFollowing.FollowingKeyword">
            <summary>
            Gets the identifier for the FOLLOWING keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.BoundedFollowing">
            <summary>
            Describes the structure of a following window with a bound.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.BoundedFollowing.Name">
            <summary>
            Gets the identifier indicating that the following window is bounded.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.BoundedFollowing.Number">
            <summary>
            Gets the identifier for the number of items in the following window.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FollowingFrame.BoundedFollowing.FollowingKeyword">
            <summary>
            Gets the identifier for the FOLLOWING keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Join">
            <summary>
            Describes the structure of the join.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Name">
            <summary>
            Gets the name identifying the join.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Join.Wrapped">
            <summary>
            Describes the structure of a join surrounded in parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Wrapped.Name">
            <summary>
            Gets the identifier indicating that the join is wrapped in parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Wrapped.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Wrapped.Join">
            <summary>
            Gets the identifier for the wrapped join.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Wrapped.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Wrapped.JoinPrime">
            <summary>
            Gets the identifier for the rest of the join statement.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Join.Joined">
            <summary>
            Describes the structure of a join item potentially joined to another item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Joined.Name">
            <summary>
            Gets the identifier indicating that we have a join item and potentially a join.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Joined.JoinItem">
            <summary>
            Gets the identifier for the item being joined.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Join.Joined.JoinPrime">
            <summary>
            Gets the identifier for the rest of the join statement.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinPrime">
            <summary>
            Describes the structure of the join prime expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Name">
            <summary>
            Gets the name identifying the join prime expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Empty">
            <summary>
            Gets the identifier indicating that there are no more joins.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered">
            <summary>
            Describes the structure of a join with a filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.Name">
            <summary>
            Gets the identifier indicating that there is another join item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.JoinType">
            <summary>
            Gets the identifier for the next join type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.JoinItem">
            <summary>
            Gets the identifier for the next join item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.JoinPrime">
            <summary>
            Gets the identifier for the next join in the series.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.On">
            <summary>
            Describes the structure of the join filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.On.Name">
            <summary>
            Gets the identifier indicating that there is a ON clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.On.OnKeyword">
            <summary>
            Gets the identifier for the ON keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Filtered.On.FilterList">
            <summary>
            Gets the identifier for the filter list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Cross">
            <summary>
            Describes the structure of a cross join.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Cross.Name">
            <summary>
            Gets the identifier indicating that the join is a cross join.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Cross.JoinType">
            <summary>
            Gets the identifier for the next join type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Cross.JoinItem">
            <summary>
            Gets the identifier for the next join item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.JoinPrime.Cross.JoinPrime">
            <summary>
            Gets the identifier for the next join in the series.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.FilteredJoinType">
            <summary>
            Describes the options for a join type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FilteredJoinType.Name">
            <summary>
            Gets the identifier indicating that the token is a join type.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FilteredJoinType.InnerJoin">
            <summary>
            Gets the identifier for the INNER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FilteredJoinType.LeftOuterJoin">
            <summary>
            Gets the identifier for the LEFT OUTER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FilteredJoinType.RightOuterJoin">
            <summary>
            Gets the identifier for the RIGHT OUTER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.FilteredJoinType.FullOuterJoin">
            <summary>
            Gets the identifier for the FULL OUTER JOIN keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter">
            <summary>
            Describes the structure of the filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Name">
            <summary>
            Gets the name identifying the filter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Wrapped">
            <summary>
            Describes the structure of a filter wrapped in parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Wrapped.Name">
            <summary>
            Gets the indentifier indicating that the filter is wrapped in parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Wrapped.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis token.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Wrapped.Filter">
            <summary>
            Gets the identifier for the wrapped filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Wrapped.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis token.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Not">
            <summary>
            Describes the structure of a filter that is negated.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Not.Name">
            <summary>
            Gets the identifier indicating that a filter is negated.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Not.NotKeyword">
            <summary>
            Gets the identifier for the NOT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Not.Filter">
            <summary>
            Gets the identifier for the negated filter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Order">
            <summary>
            Describes the structure of filter that compares the order of two items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Order.Name">
            <summary>
            Gets the identifier indicating that the filter is an order filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Order.Left">
            <summary>
            Gets the identifier for the value on the left.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Order.ComparisonOperator">
            <summary>
            Gets the identifier for the comparison operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Order.Right">
            <summary>
            Gets the identifier for the value on the right.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Between">
            <summary>
            Describes the structure of a filter checking that a value falls within a range.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.Name">
            <summary>
            The identifier indicating that the filter is a BETWEEN filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.Expression">
            <summary>
            Gets the identifier for the value being checked.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.NotKeyword">
            <summary>
            Gets the identifier for whether or not to negate the filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.BetweenKeyword">
            <summary>
            Gets the identifier for the BETWEEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.LowerBound">
            <summary>
            Gets the identifier for the lower bound value.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.And">
            <summary>
            Gets the identifier for the AND keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Between.UpperBound">
            <summary>
            Gets the identifier for the upper bound value.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Like">
            <summary>
            Describes the structure of a filter doing a string comparison.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Like.Name">
            <summary>
            Gets the identifier indicating whether the filter is doing a string comparison.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Like.Left">
            <summary>
            Gets the identifier for the expression being compared.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Like.NotKeyword">
            <summary>
            Gets the identifier indicating whether to negate the results of the comparison.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Like.LikeKeyword">
            <summary>
            Gets the identifier for the LIKE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Like.Right">
            <summary>
            Gets the identifier for string literal being compared to.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Is">
            <summary>
            Describes the structure of a filter checking whether a value is null.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Is.Name">
            <summary>
            Gets the identifier indicating that the filter is checking whether a value is null or not.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Is.Expression">
            <summary>
            Gets the identifier for value being compared.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Is.IsKeyword">
            <summary>
            Gets the identifier for the IS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Is.NotKeyword">
            <summary>
            Gets the identifier for the NOT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Is.NullKeyword">
            <summary>
            Gets the identifier for the NULL keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.In">
            <summary>
            Describes the structure of a filter checking whether a value exists in a list of values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Name">
            <summary>
            Gets the identifier indicating that the filter is checking whether a value exists in a list of values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Expression">
            <summary>
            Gets the identifier for the value being compared.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.NotKeyword">
            <summary>
            Gets the identifier for the NOT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.InKeyword">
            <summary>
            Gets the identifier for the IN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.FunctionCall">
            <summary>
            Gets the identifier indicating that the values come from a function call.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.In.Values">
            <summary>
            Describes the structure of a values list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Values.Name">
            <summary>
            Gets the identifier indicating that the source is a value list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Values.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis token.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Values.ValueList">
            <summary>
            Gets the identifier indicating that the values come from a list of values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Values.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.In.Select">
            <summary>
            Describes the structure a select source.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Select.Name">
            <summary>
            Gets the identifier indicating that the source is a SELECT expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Select.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis token.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Select.SelectStatement">
            <summary>
            Gets the identifier indicating that the values come from a SELECT expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.In.Select.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Exists">
            <summary>
            Describes the structure of an Exists filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Exists.Name">
            <summary>
            Gets the identifier indicating that the filter is an exists filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Exists.ExistsKeyword">
            <summary>
            Gets the identifier for the EXISTS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Exists.LeftParenthesis">
            <summary>
            Gets the identfier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Exists.SelectStatement">
            <summary>
            Gets the identifier for the SELECT expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Exists.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify">
            <summary>
            Describes the structure of a existential or universal quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.Name">
            <summary>
            Gets the identifier indicating that the filter is a quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.Expression">
            <summary>
            Gets the identifier for the value being compared.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.ComparisonOperator">
            <summary>
            Gets the identifier for the comparison operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.Quantifier">
            <summary>
            Gets the identifier for the existential or universal quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.SelectStatement">
            <summary>
            Gets the identifier for the select expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.ValueList">
            <summary>
            Gets the identifier for the value list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Quantify.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Filter.Function">
            <summary>
            Describes the structure of a
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Function.Name">
            <summary>
            Gets the identifier indicating that the filter is a function call.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Filter.Function.Expression">
            <summary>
            Gets the identifier for the function being called.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator">
            <summary>
            Describes the structure of a comparison operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.Name">
            <summary>
            Gets the identifier indicating that the token is a comparison operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.EqualTo">
            <summary>
            Gets the identifier for the equality operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.NotEqualTo">
            <summary>
            Gets the identifier for the inequality operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.LessThanEqualTo">
            <summary>
            Gets the identifier for the less than or equal to operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.GreaterThanEqualTo">
            <summary>
            Gets the identifier for the greater than or equal to operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.LessThan">
            <summary>
            Gets the identifier for the less than operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ComparisonOperator.GreaterThan">
            <summary>
            Gets the identifier for the greater than operator.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Quantifier">
            <summary>
            Describes the structure of a quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Quantifier.Name">
            <summary>
            Gets the identifier indicating that the current token is a quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Quantifier.All">
            <summary>
            Gets the identifier for the ALL quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Quantifier.Any">
            <summary>
            Gets the identifier for the ANY quantifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Quantifier.Some">
            <summary>
            Gets the identifier for the SOME quantifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrFilter">
            <summary>
            Describes the structure of two filters OR'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Name">
            <summary>
            Gets the identifier indicating that two filters are OR'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Single">
            <summary>
            Gets the identifier for a single filter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrFilter.Wrapped">
            <summary>
            Gets the structure of a filter wrapped in parentheses.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Wrapped.Name">
            <summary>
            Gets the identifier indicating that the filter is wrapped in parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Wrapped.NotKeyword">
            <summary>
            Gets the identifier for the NOT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Wrapped.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Wrapped.OrFilter">
            <summary>
            Gets the identifier for the wrapped filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Wrapped.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.OrFilter.Multiple">
            <summary>
            Describes the structure of a filter joining two filters with an OR.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Multiple.Name">
            <summary>
            Gets the identifier indicating that filters are OR'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Multiple.First">
            <summary>
            Gets the identifier for the first filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Multiple.Or">
            <summary>
            Gets the identifier for the OR keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.OrFilter.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the filters.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.AndFilter">
            <summary>
            Describes the structure of two filters AND'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Name">
            <summary>
            Gets the identifier indicating that two filters are AND'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Single">
            <summary>
            Gets the identifier for a single filter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.AndFilter.Multiple">
            <summary>
            Gets the identifier indicating that two filter are AND'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Multiple.Name">
            <summary>
            Gets the identifier indicating that filters are AND'd together.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Multiple.First">
            <summary>
            Gets the identifier for the first filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Multiple.And">
            <summary>
            Gets the identifier for the AND keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the filters.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.AndFilter.Wrapped">
            <summary>
            Gets the structure of a filter wrapped in parentheses.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Wrapped.Name">
            <summary>
            Gets the identifier indicating that the filter is wrapped in parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Wrapped.NotKeyword">
            <summary>
            Gets the identifier for the NOT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Wrapped.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Wrapped.AndFilter">
            <summary>
            Gets the identifier for the wrapped filter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.AndFilter.Wrapped.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ValueList">
            <summary>
            Describes the structure of the value list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ValueList.Name">
            <summary>
            Gets the name identifying the value list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ValueList.Single">
            <summary>
            Gets the identifier indicating that there is a single value.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ValueList.Multiple">
            <summary>
            Describes the structure of a value list containing multiple items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ValueList.Multiple.Name">
            <summary>
            Gets the identifier indicating that the value list has more than one item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ValueList.Multiple.First">
            <summary>
            Gets the identifier for the first value.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ValueList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ValueList.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the values.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.GroupByList">
            <summary>
            Describes the structure of the GROUP BY list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.GroupByList.Name">
            <summary>
            Gets the name identifying the GROUP BY list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.GroupByList.Single">
            <summary>
            Gets the identifier for a single GROUP BY item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.GroupByList.Multiple">
            <summary>
            Describes the structure of multiple GROUP BY items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.GroupByList.Multiple.Name">
            <summary>
            Gets the identifier indicating that there are multiple GROUP BY items.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.GroupByList.Multiple.First">
            <summary>
            Gets the identifier for the first GROUP BY item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.GroupByList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.GroupByList.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the GROUP BY items.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ArithmeticItem">
            <summary>
            Describes the structure of an item that can be an arithmetic expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ArithmeticItem.Name">
            <summary>
            The identifier indicating that the item can be an arithmetic expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ArithmeticItem.ArithmeticExpression">
            <summary>
            Gets the identifier indicating that the item is an arithmetic expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.WrappedItem">
            <summary>
            Describes the structure of an item that is potentially wrapped by parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Name">
            <summary>
            Gets the identifier indicating that the item is a wrapped item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Item">
            <summary>
            Gets the identifier for an unwrapped item.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Negated">
            <summary>
            Describes the structure of an negated expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Negated.Name">
            <summary>
            Gets the identifier indicating that the expression is negated.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Negated.Minus">
            <summary>
            Gets the identifier for the minus sign.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Negated.Item">
            <summary>
            Gets the identifier for the expression being negated.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Wrapped">
            <summary>
            Describes the structure of an item that is wrapped in parentheses.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Wrapped.Name">
            <summary>
            Gets the identifier indicating that the item is wrapped.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Wrapped.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Wrapped.AdditiveExpression">
            <summary>
            Gets the identifier for the additive expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.WrappedItem.Wrapped.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Item">
            <summary>
            Describes the structure of the item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Name">
            <summary>
            Gets the name identifying the item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Column">
            <summary>
            Gets the identifier indicating that the item is a column.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.FunctionCall">
            <summary>
            Gets the identifier indicating that the item is a function call.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Number">
            <summary>
            Gets the identifier indicating that the item is a number.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.String">
            <summary>
            Gets the identifier indicating that the item is a string.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Null">
            <summary>
            Gets the identifier indicating that the item is a null.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.MatchCase">
            <summary>
            Gets the identifier indicating that the item is a case expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.ConditionCase">
            <summary>
            Gets the identifier indicating that the item is a case expression.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Item.Select">
            <summary>
            Gets the identifier indicating that the item is a select statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Select.Name">
            <summary>
            Gets the identifier indicating that the item is a SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Select.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Select.SelectStatement">
            <summary>
            Gets the identifier for the SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Item.Select.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MatchCase">
            <summary>
            Describes the structure of a CASE expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchCase.Name">
            <summary>
            Gets the identifier indicating that an item is a case statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchCase.CaseKeyword">
            <summary>
            Gets the identifier for the CASE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchCase.Expression">
            <summary>
            Gets the identifier for the expression to match against the options.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchCase.MatchList">
            <summary>
            Gets the identifier for the list of possible matches.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchCase.EndKeyword">
            <summary>
            Gets the identifier for the END keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MatchList">
            <summary>
            Describes the structure of a case's match list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchList.Name">
            <summary>
            Gets the identifier indicating that there's a case's match list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchList.Match">
            <summary>
            Gets the identifier for the first match.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchList.MatchListPrime">
            <summary>
            Gets the identifier for the rest of the matches.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MatchListPrime">
            <summary>
            Desribes the structure of the remaining matches in a CASE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Name">
            <summary>
            Gets the identifier indicating that there are potentially more tests.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Empty">
            <summary>
            Gets the identifier indicating that there are no more matches.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Match">
            <summary>
            Describes the structure if there are more matches.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Match.Name">
            <summary>
            Gets the identifier indicating that there is a match.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Match.First">
            <summary>
            Gets the identifier for the next match.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Match.Remaining">
            <summary>
            Gets the identifier for the remaining matches.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Else">
            <summary>
            Describes the structure of the default case.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Else.Name">
            <summary>
            Gets the identifier indicating a default case.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Else.ElseKeyword">
            <summary>
            Gets the identifier for the ELSE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MatchListPrime.Else.Value">
            <summary>
            Gets the identifier for the default value.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Match">
            <summary>
            Describes the structure of a match in a CASE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Match.Name">
            <summary>
            Gets the identifier indicating that there is a CASE test.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Match.WhenKeyword">
            <summary>
            Gets the identifier for the WHEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Match.Expression">
            <summary>
            Gets the identifier for the value being matched against.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Match.ThenKeyword">
            <summary>
            Gets the identifier for the THEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Match.Value">
            <summary>
            Gets the identifier for the value to return if there's a match.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ConditionalCase">
            <summary>
            Describes the structure of a CASE expression.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionalCase.Name">
            <summary>
            Gets the identifier indicating that an item is a case statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionalCase.CaseKeyword">
            <summary>
            Gets the identifier for the CASE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionalCase.ConditionList">
            <summary>
            Gets the identifier for the list of possible matches.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionalCase.EndKeyword">
            <summary>
            Gets the identifier for the END keyword.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ConditionList">
            <summary>
            Describes the structure of a case's match list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionList.Name">
            <summary>
            Gets the identifier indicating that there's a case's match list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionList.Condition">
            <summary>
            Gets the identifier for the first match.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionList.ConditionListPrime">
            <summary>
            Gets the identifier for the rest of the matches.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime">
            <summary>
            Desribes the structure of the remaining matches in a CASE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Name">
            <summary>
            Gets the identifier indicating that there are potentially more tests.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Empty">
            <summary>
            Gets the identifier indicating that there are no more matches.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Condition">
            <summary>
            Describes the structure if there are more matches.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Condition.Name">
            <summary>
            Gets the identifier indicating that there is a match.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Condition.First">
            <summary>
            Gets the identifier for the next match.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Condition.Remaining">
            <summary>
            Gets the identifier for the remaining matches.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Else">
            <summary>
            Describes the structure of the default case.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Else.Name">
            <summary>
            Gets the identifier indicating a default case.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Else.ElseKeyword">
            <summary>
            Gets the identifier for the ELSE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ConditionListPrime.Else.Value">
            <summary>
            Gets the identifier for the default value.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Condition">
            <summary>
            Describes the structure of a condition in a CASE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Condition.Name">
            <summary>
            Gets the identifier indicating that there is a CASE test.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Condition.WhenKeyword">
            <summary>
            Gets the identifier for the WHEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Condition.Filter">
            <summary>
            Gets the identifier for the condition being tested.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Condition.ThenKeyword">
            <summary>
            Gets the identifier for the THEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Condition.Value">
            <summary>
            Gets the identifier for the value to return if the condition is satisfied.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.InsertStatement">
            <summary>
            Describes the structure of the INSERT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Name">
            <summary>
            Gets the name identifying the INSERT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.InsertKeyword">
            <summary>
            Gets the identifier for the INSERT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.IntoKeyword">
            <summary>
            Gets the identifier for the INTO keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Table">
            <summary>
            Gets the identifier for the table name.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.InsertStatement.AliasExpression">
            <summary>
            Describes the structure of the table alias.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.AliasExpression.Name">
            <summary>
            Gets the identifier indicating that the table has an alias.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.AliasExpression.AliasIndicator">
            <summary>
            Gets the identifier for the AS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.AliasExpression.Alias">
            <summary>
            Gets the identiifier for the alias.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Columns">
            <summary>
            Describes the structure of the columns list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Columns.Name">
            <summary>
            Gets the identifier indicating that there is a column list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Columns.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Columns.ColumnList">
            <summary>
            Gets the identifier for the column list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Columns.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Values">
            <summary>
            Describes the structure of the values list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Values.Name">
            <summary>
            Gets the identifier indicating that a value list is used.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Values.ValuesKeyword">
            <summary>
            Gets the identifier for the VALUES keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Values.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Values.ValueList">
            <summary>
            Gets the identifier for the value list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Values.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Select">
            <summary>
            Describes the structure of the SELECT expression generating the values.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Select.Name">
            <summary>
            Gets the identifier indicating that the values come from a SELECT statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Select.LeftParenthesis">
            <summary>
            Gets the identifier for the left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Select.SelectStatement">
            <summary>
            Gets the identifier for the select statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.InsertStatement.Select.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ColumnList">
            <summary>
            Describes the structure of the column list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ColumnList.Name">
            <summary>
            Gets the name identifying the column list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ColumnList.Single">
            <summary>
            Gets the identifier used to indicate that a single column exists.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.ColumnList.Multiple">
            <summary>
            Describes the structure of a column list with multiple columns.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ColumnList.Multiple.Name">
            <summary>
            Gets the identifier used to indicate that multiple columns exist.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ColumnList.Multiple.First">
            <summary>
            Gets the identifier for the first column.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ColumnList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.ColumnList.Multiple.Remaining">
            <summary>
            Gets the identifier for the remaining columns.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.UpdateStatement">
            <summary>
            Describes the structure of the UPDATE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.Name">
            <summary>
            Gets the name identifying the UPDATE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.UpdateKeyword">
            <summary>
            Gets the identifier for the UPDATE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.Table">
            <summary>
            Gets the identifier for the table.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.SetKeyword">
            <summary>
            Gets the identifier for the SET keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.SetterList">
            <summary>
            Gets the identifier for the setter list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.AliasExpression">
            <summary>
            Describes the structure of the table alias.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.AliasExpression.Name">
            <summary>
            Gets the identifier indicating that the table is aliased.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.AliasExpression.AliasIndicator">
            <summary>
            Gets the identifier for the AS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.AliasExpression.Alias">
            <summary>
            Gets the identifier for the alias.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.Where">
            <summary>
            Describes the structure of the WHERE clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.Where.Name">
            <summary>
            Gets the identifier indicating that there is a WHERE clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.Where.WhereKeyword">
            <summary>
            Gets the identifier for the WHERE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.UpdateStatement.Where.FilterList">
            <summary>
            Gets the identifier for the filter list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SetterList">
            <summary>
            Describes the structure of the setter list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SetterList.Name">
            <summary>
            Gets the name identifying the setter list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SetterList.Single">
            <summary>
            Gets the identifier indicating that the list only has one setter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.SetterList.Multiple">
            <summary>
            Describes the structure of a setter list when there is more than one item.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SetterList.Multiple.Name">
            <summary>
            Gets the identifier indicating that there are multiple setters in the list.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SetterList.Multiple.First">
            <summary>
            Gets the identifier for the first setter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SetterList.Multiple.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.SetterList.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the setters in the list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.Setter">
            <summary>
            Describes the structure of a setter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Setter.Name">
            <summary>
            Gets the name identifying the setter.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Setter.Column">
            <summary>
            Gets the identifier for the column being assigned.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Setter.Assignment">
            <summary>
            Gets the identifier for the assignment operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.Setter.Value">
            <summary>
            Gets the identifier for the value the column is being assigned to.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.DeleteStatement">
            <summary>
            Describes the structure of the DELETE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.Name">
            <summary>
            Gets the name identifying the DELETE statement.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.DeleteKeyword">
            <summary>
            Gets the identifier for the DELETE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.FromKeyword">
            <summary>
            Gets the identifier for the FROM keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.Table">
            <summary>
            Gets the identifeir for the table name.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.AliasExpression">
            <summary>
            Describes the structure of the alias for the table.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.AliasExpression.Name">
            <summary>
            Gets the identifier indicating that the table is aliased.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.AliasExpression.AliasIndicator">
            <summary>
            Gets the indentifier for the AS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.AliasExpression.Alias">
            <summary>
            Gets the identifier for the alias.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.Where">
            <summary>
            Describes the structure of the WHERE clause.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.Where.Name">
            <summary>
            Gets the indentifier that indicates whether the WHERE clause is present.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.Where.WhereKeyword">
            <summary>
            Gets the indentifier for the WHERE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.DeleteStatement.Where.FilterList">
            <summary>
            Gets the identifier for the filter list.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier">
            <summary>
            Describes the structure of a multi-part identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Name">
            <summary>
            Gets the name identifying the multi-part identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Single">
            <summary>
            Gets the identifier indicating that there is a single identifier.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Multiple">
            <summary>
            Describes the structure of an identifier with multiple parts.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Multiple.Name">
            <summary>
            Gets the identifier indicating that there are multiple parts.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Multiple.First">
            <summary>
            Gets the identifier for the first identifier.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Multiple.Dot">
            <summary>
            Gets the identifier for the dot separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlGrammar.MultipartIdentifier.Multiple.Remaining">
            <summary>
            Gets the identifier for the rest of the identifiers.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.SqlTokenRegistry">
            <summary>
            Identifies tokens as SQL tokens.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.TokenRegistry">
            <summary>
            Generates a series of tokens.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenRegistry.#ctor">
            <summary>
            Initializes a new instance of a TokenRegistry.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenRegistry.Define(System.String,System.String,System.Boolean)">
            <summary>
            Associates the given token name to the regular expression that
            tokens of that type are expected to match.
            </summary>
            <param name="tokenName">The type of the token to associate the regular expression with.</param>
            <param name="regex">The regular expression that the token is expected match.</param>
            <param name="ignoreCase">Specifies whether the regex should be case-sensitive.</param>
            <remarks>
            Multiple regular expressions can be registered to the same token name.
            They will be tried in the order that they are defined.
            </remarks>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenRegistry.IsRegistered(System.String)">
            <summary>
            Gets whether a token with the given name has been registered.
            </summary>
            <param name="tokenName">The name of the token to search for.</param>
            <returns>True if the token has been registered; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenRegistry.ExtractToken(System.String,System.Int32@)">
            <summary>
            Extracts the next token from the given input string, starting at the given index.
            </summary>
            <param name="input">The input string to get the next token from.</param>
            <param name="index">The index into the string to start searching for a token.</param>
            <returns>The extracted token -or- null if no token is found.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenRegistry.CreateTokenSource(System.String)">
            <summary>
            Creates a stream of tokens by tokenizing the given string,
            verifying the tokens against the token definitions.
            </summary>
            <param name="commandText">The input stream containing the tokens.</param>
            <returns>The new token source.</returns>
        </member>
        <member name="T:SQLGeneration.Parsing.TokenSource">
            <summary>
            Retrieves tokens and provides the ability to return them if they can't be used.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenSource.#ctor">
            <summary>
            Initializes a new instance of a TokenSource.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenSource.GetToken">
            <summary>
            Attempts to retrieve a token matching the definition associated
            with the given name.
            </summary>
            <returns>
            A result object describing the token that was found -or- null if no more tokens are found.
            </returns>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenSource.GetNextToken">
            <summary>
            Retrieves the next token from the source if the undo buffer is empty.
            </summary>
            <returns>The next token -or- null if there are no more tokens.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenSource.PutBack(SQLGeneration.Parsing.TokenResult)">
            <summary>
            Restores the given token to the front of the token stream.
            </summary>
            <param name="result">The token to restore.</param>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.As">
            <summary>
            Gets the identifier for alias indicators (AS).
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.PlusOperator">
            <summary>
            Gets the identifier for the addition operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.MinusOperator">
            <summary>
            Gets the identifier for the subtraction operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.MultiplicationOperator">
            <summary>
            Gets the identifier for the multiplication operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.DivisionOperator">
            <summary>
            Gets the identifier for the division operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.ModulusOperator">
            <summary>
            Gets teh identifier for the modulus operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Between">
            <summary>
            Gets the identifier for the BETWEEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Comma">
            <summary>
            Gets the identifier for the comma separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.And">
            <summary>
            Gets the identifier for the AND keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Or">
            <summary>
            Gets the identifier for the OR keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Delete">
            <summary>
            Gets the identifier for the DELETE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.All">
            <summary>
            Gets the identifier for the ALL keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Any">
            <summary>
            Gets the identifier for the ANY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Some">
            <summary>
            Gets the identifier for the SOME keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Distinct">
            <summary>
            Gets the identifier for the DISTINCT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Dot">
            <summary>
            Gets the identifier for the dot separator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.From">
            <summary>
            Gets the identifier for the FROM keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.GroupBy">
            <summary>
            Gets the identifier for the GROUP BY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Having">
            <summary>
            Gets the identifier for the HAVING keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Identifier">
            <summary>
            Gets the identifier for identifiers.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.In">
            <summary>
            Gets the identifier for the IN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Insert">
            <summary>
            Gets the identifier for the INSERT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Into">
            <summary>
            Gets the indentifier for the INTO keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Is">
            <summary>
            Gets the identifier for the IS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.InnerJoin">
            <summary>
            Gets the identifier for the INNER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.LeftOuterJoin">
            <summary>
            Gets the identifier for the LEFT OUTER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.RightOuterJoin">
            <summary>
            Gets the identifier for the RIGHT OUTER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.FullOuterJoin">
            <summary>
            Gets the identifier for the FULL OUTER JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.CrossJoin">
            <summary>
            Gets the identifier for the CROSS JOIN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.LeftParenthesis">
            <summary>
            Gets the identifier for a left parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Like">
            <summary>
            Gets the identifier for the LIKE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Not">
            <summary>
            Gets the identifier for the NOT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Null">
            <summary>
            Gets the identifier for the NULL keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.NullsFirst">
            <summary>
            Gets the identifier for the NULLS FIRST keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.NullsLast">
            <summary>
            Gets the identifier for the NULLS LAST keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Number">
            <summary>
            Gets the idenifier for numeric literals.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.On">
            <summary>
            Gets the identifier for the ON keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.OrderBy">
            <summary>
            Gets the identifier for the ORDER BY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Descending">
            <summary>
            Gets the identifier for the DESC keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Ascending">
            <summary>
            Gets the identifier for the ASC keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Percent">
            <summary>
            Gets the identifier for the PERCENT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.RightParenthesis">
            <summary>
            Gets the identifier for the right parenthesis.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Select">
            <summary>
            Gets the identifier for the SELECT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Union">
            <summary>
            Gets the identifier for the UNION keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Intersect">
            <summary>
            Gets the identfiier for the INTERSECT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Except">
            <summary>
            Gets the identifier for the EXCEPT keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Minus">
            <summary>
            Gets the identifier for the MINUS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Set">
            <summary>
            Gets the identifier for the SET keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.String">
            <summary>
            Gets the identifier for a string literal.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Top">
            <summary>
            Gets the identifier for the TOP keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Update">
            <summary>
            Gets the identifier for the UPDATE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Values">
            <summary>
            Gets the identifier for the VALUES keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Where">
            <summary>
            Gets the identifier for the WHERE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.WithTies">
            <summary>
            Gets the identifier for the WITH TIES keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.EqualTo">
            <summary>
            Gets the identifier for the equality operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.NotEqualTo">
            <summary>
            Gets the identifier for the inequality operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.LessThanEqualTo">
            <summary>
            Gets the identifier for the less than or equal to operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.GreaterThanEqualTo">
            <summary>
            Gets the identifier for the greater than or equal to operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.LessThan">
            <summary>
            Gets the identifier for the less than operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.GreaterThan">
            <summary>
            Gets the identifier for the greater than operator.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Exists">
            <summary>
            Gets the identifier for the EXISTS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Over">
            <summary>
            Gets the identifier for the OVER keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.PartitionBy">
            <summary>
            Gets the identifier for the PARTITION BY keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Rows">
            <summary>
            Gets the identifier for the ROWS keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Range">
            <summary>
            Gets the identifier for the RANGE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Unbounded">
            <summary>
            Gets the identifier for the UNBOUNDED keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Preceding">
            <summary>
            Gets the identifier for the PRECEECING keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Following">
            <summary>
            Gets the identifier for the FOLLOWING keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.CurrentRow">
            <summary>
            Gets the identifier for the CURRENT ROW keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Case">
            <summary>
            Gets the identifier for the CASE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.When">
            <summary>
            Gets the identifier for the WHEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Then">
            <summary>
            Gets the identfier for the THEN keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.Else">
            <summary>
            Gets the identifier for the ELSE keyword.
            </summary>
        </member>
        <member name="F:SQLGeneration.Parsing.SqlTokenRegistry.End">
            <summary>
            Gets the identifier for the END keyword.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.SqlTokenRegistry.#ctor">
            <summary>
            Initializes a new instance of a SqlTokenizer.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.Token">
            <summary>
            Represents a token within an expression.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.Token.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Token.
            </summary>
            <param name="tokenName">The type of the token that is expected.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Token.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a Token.
            </summary>
            <param name="tokenName">The type of the token that is expected.</param>
            <param name="expectedValue">The expected value of the token.</param>
        </member>
        <member name="M:SQLGeneration.Parsing.Token.Match(SQLGeneration.Parsing.IParseAttempt,System.String)">
            <summary>
            Attempts to match the expression item with the values returned by the parser.
            </summary>
            <param name="attempt">The parser currently iterating over the token source.</param>
            <param name="itemName">The name of the token in the outer expression.</param>
            <returns>The results of the match.</returns>
        </member>
        <member name="P:SQLGeneration.Parsing.Token.TokenType">
            <summary>
            Gets the type of the token that is expected.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.Token.ExpectedValue">
            <summary>
            Gets the expected value of the token.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.TokenResult">
            <summary>
            Holds the results of trying to extract a token from a token source.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a TokenResult.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.TokenResult.Name">
            <summary>
            Gets the name of the token type that was requested.
            </summary>
        </member>
        <member name="P:SQLGeneration.Parsing.TokenResult.Value">
            <summary>
            Gets the value that was found, whether it was the requested
            type or not -or- null if no more tokens were available from
            the token source.
            </summary>
        </member>
        <member name="T:SQLGeneration.Parsing.TokenStream">
            <summary>
            Provides convenience methods for building streams of tokens.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenStream.#ctor">
            <summary>
            Initializes a new instance of a TokenStream.
            </summary>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenStream.Add(SQLGeneration.Parsing.TokenResult)">
            <summary>
            Adds a token to the stream.
            </summary>
            <param name="result">The token result to add.</param>
            <returns>The current token stream.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenStream.AddRange(SQLGeneration.Parsing.TokenStream)">
            <summary>
            Adds the given tokens to the stream.
            </summary>
            <param name="stream">The tokens to add to the stream.</param>
            <returns>The current token stream.</returns>
        </member>
        <member name="M:SQLGeneration.Parsing.TokenStream.CreateTokenSource">
            <summary>
            Creates a token source from the stream.
            </summary>
            <returns>The token source.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Placeholder">
            <summary>
            Acts as a placeholder anywhere within the options of a SQL statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Placeholder.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Placeholder.
            </summary>
            <param name="value">The value of the placeholder.</param>
        </member>
        <member name="P:SQLGeneration.Builders.Placeholder.Value">
            <summary>
            Gets the value of the placeholder.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.SourceCollection">
            <summary>
            Holds all of the sources that occur within a SELECT statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.SourceCollection.#ctor">
            <summary>
            Initializes a new instance of a SourceCollection.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.SourceCollection.#ctor(SQLGeneration.Builders.SourceCollection)">
            <summary>
            Initializes a new instance of a SourceCollection, copying the values
            from the given source collection.
            </summary>
            <param name="other">The source collection to copy the value from.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SourceCollection.AddSource(System.String,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Adds the given source, associating it with the given source name.
            </summary>
            <param name="sourceName">The name to associate with the source.</param>
            <param name="source">The source to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SourceCollection.AddSources(SQLGeneration.Builders.SourceCollection)">
            <summary>
            Adds all of the sources from the given collection to the current collection.
            </summary>
            <param name="other">The other source collection to add item from.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SourceCollection.Exists(System.String)">
            <summary>
            Gets whether a source exists with the given name.
            </summary>
            <param name="sourceName">The name of the source.</param>
            <returns>True if the source exists; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SourceCollection.Remove(System.String)">
            <summary>
            Removes the source with the given name.
            </summary>
            <param name="sourceName">The name of the source to remove.</param>
            <returns>True if the source is removed; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.SourceCollection.Item(System.String)">
            <summary>
            Gets the source with the given name or alias.
            </summary>
            <param name="sourceName">The name or alias of the source.</param>
            <returns>The source with the given name or alias.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.SourceCollection.Count">
            <summary>
            Gets the number of sources in the source collection.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SourceCollection.Sources">
            <summary>
            Gets the aliased sources in the collection.
            </summary>
        </member>
        <member name="T:SQLGeneration.SQLGenerationException">
            <summary>
            Represents an exception that is thrown when an error occurs within SQLGeneration.
            </summary>
        </member>
        <member name="M:SQLGeneration.SQLGenerationException.#ctor">
            <summary>
            Initializes a new instance of a SQLGenerationException.
            </summary>
        </member>
        <member name="M:SQLGeneration.SQLGenerationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a SQLGenerationException.
            </summary>
            <param name="message">A message describing the error.</param>
        </member>
        <member name="M:SQLGeneration.SQLGenerationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of a SQLGenerationException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="innerException">The exception that caused the exception.</param>
        </member>
        <member name="M:SQLGeneration.SQLGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of a SQLGenerationException.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:SQLGeneration.Builders.EqualToFilter">
            <summary>
            Represents a comparison between two items for equality.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.EqualToFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a EqualToFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.EqualToFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.FilterGroup">
            <summary>
            Represents a grouping of filters.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FilterGroup.#ctor(SQLGeneration.Builders.Conjunction,SQLGeneration.Builders.IFilter[])">
            <summary>
            Initializes a new instance of a FilterGroup.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FilterGroup.AddFilter(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the group.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.FilterGroup.RemoveFilter(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the group.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FilterGroup.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FilterGroup.ShouldWrapInParentheses(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Determines whether the filter should be surrounded by parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>True if the filter should be surround by parentheses; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.FilterGroup.Optimize">
            <summary>
            Compacts the filter group by combining it with child filter
            groups where doing so won't alter the semantics of the overall
            expression.
            </summary>
            <remarks>
            This is meant to be used by the command
            builders to reduce the overhead of deeply nested filters.
            </remarks>
        </member>
        <member name="P:SQLGeneration.Builders.FilterGroup.Conjunction">
            <summary>
            Gets the conjunction used to combine the filters within the group.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FilterGroup.Filters">
            <summary>
            Gets the filters in the filter group.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FilterGroup.HasFilters">
            <summary>
            Gets whether there are any filters in the group.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.FilterGroup.Count">
            <summary>
            Gets the number of items in the filter.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.FullOuterJoin">
            <summary>
            Represents a full-outer join in a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.FullOuterJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a FullOuterJoin.
            </summary>
            <param name="leftHand">The left hand item in the join.</param>
            <param name="rightHand">The right hand table in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.FullOuterJoin.GetJoinType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the name of the join type.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The name of the join type.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Function">
            <summary>
            Adds a function call to a command.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Function.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Function.
            </summary>
            <param name="name">The name of the function.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Function.#ctor(SQLGeneration.Builders.Namespace,System.String)">
            <summary>
            Initializes a new instance of a Function.
            </summary>
            <param name="qualifier">The schema the function exists in.</param>
            <param name="name">The name of the function.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Function.#ctor(System.String,SQLGeneration.Builders.IProjectionItem[])">
            <summary>
            Initializes a new instance of a Function.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="arguments">The arguments being passed to the function.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Function.#ctor(SQLGeneration.Builders.Namespace,System.String,SQLGeneration.Builders.IProjectionItem[])">
            <summary>
            Initializes a new instance of a Function.
            </summary>
            <param name="qualifier">The schema the function exists in.</param>
            <param name="name">The name of the function.</param>
            <param name="arguments">The arguments being passed to the function.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Function.AddArgument(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Adds the given projection item to the arguments list.
            </summary>
            <param name="item">The value to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Function.RemoveArgument(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Removes the given projection item from the arguments list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.Function.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.Function.Qualifier">
            <summary>
            Gets or sets the schema the functions belongs to.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Function.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Function.Arguments">
            <summary>
            Gets a list of the arguments being passed to the function.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Function.FunctionWindow">
            <summary>
            Gets or sets the window to apply the function over.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.GreaterThanEqualToFilter">
            <summary>
            Represents a comparison where the left hand item is greater than or equal to the right hand item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanEqualToFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a GreaterThanEqualToFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanEqualToFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.GreaterThanFilter">
            <summary>
            Represents a comparison where the left hand item is greater than the right hand item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a GreaterThanFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.GreaterThanFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.InFilter">
            <summary>
            Represents a filter where the values on the left hand must be in the values on the right hand.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.InFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IValueProvider)">
            <summary>
            Initializes a new instance of a InFilter.
            </summary>
            <param name="leftHand">The left hand value that must exist in the list of values.</param>
            <param name="values">The list of values the left hand must exist in.</param>
        </member>
        <member name="M:SQLGeneration.Builders.InFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.InFilter.Not">
            <summary>
            Gets or sets whether to negate the comparison.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.InFilter.LeftHand">
            <summary>
            Gets the left hand operand of the filter.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.InFilter.Values">
            <summary>
            Gets the value provider.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.ValueList">
            <summary>
            Provides a list of values that can appear in an 'in' comparison.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ValueList.#ctor">
            <summary>
            Initializes a new instance of a InList.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.ValueList.#ctor(SQLGeneration.Builders.IProjectionItem[])">
            <summary>
            Initializes a new instance of a InList.
            </summary>
            <param name="values">The values to add to the list.</param>
        </member>
        <member name="M:SQLGeneration.Builders.ValueList.AddValue(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Adds the given projection item to the values list.
            </summary>
            <param name="item">The value to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.ValueList.RemoveValue(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Adds the given projection item from the values list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.ValueList.Values">
            <summary>
            Gets the values being provided.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.InnerJoin">
            <summary>
            Represents an inner join in a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.InnerJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a InnerJoin.
            </summary>
            <param name="leftHand">The left hand item in the join.</param>
            <param name="rightHand">The right hand item in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.InnerJoin.GetJoinType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the name of the join type.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The name of the join type.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.InsertBuilder">
            <summary>
            Builds a string of an insert statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.InsertBuilder.#ctor(SQLGeneration.Builders.Table,SQLGeneration.Builders.IValueProvider,System.String)">
            <summary>
            Initializes a new instance of a InsertBuilder.
            </summary>
            <param name="table">The table being inserted into.</param>
            <param name="values">The values to insert into the table.</param>
            <param name="alias">The alias to use to refer to the table.</param>
        </member>
        <member name="M:SQLGeneration.Builders.InsertBuilder.AddColumn(SQLGeneration.Builders.Column)">
            <summary>
            Adds the column to the insert statement.
            </summary>
            <param name="column">The column to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.InsertBuilder.RemoveColumn(SQLGeneration.Builders.Column)">
            <summary>
            Removes the column from the insert statement.
            </summary>
            <param name="column">The column to remove.</param>
            <returns>True if the column was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.InsertBuilder.SQLGeneration#Builders#ICommand#GetCommandTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the SQL for the insert statement.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
        </member>
        <member name="P:SQLGeneration.Builders.InsertBuilder.Table">
            <summary>
            Gets the table that is being inserted into.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.InsertBuilder.Columns">
            <summary>
            Gets the columns being inserted into.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.InsertBuilder.Values">
            <summary>
            Gets the list of values or select statement that populates the insert.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Intersect">
            <summary>
            Generates the intersection among all of the queries.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Intersect.#ctor(SQLGeneration.Builders.ISelectBuilder,SQLGeneration.Builders.ISelectBuilder)">
            <summary>
            Initializes a new instance of a Intersect.
            </summary>
            <param name="leftHand">The left hand SELECT command.</param>
            <param name="rightHand">The right hand SELECT command.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Intersect.GetCombinationType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Retrieves the text used to combine two queries.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The text used to combine two queries.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.LeftOuterJoin">
            <summary>
            Represents an left-outer join in a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.LeftOuterJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a LeftOuterJoin.
            </summary>
            <param name="leftHand">The left hand item in the join.</param>
            <param name="rightHand">The right hand table in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.LeftOuterJoin.GetJoinType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the name of the join type.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The name of the join type.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.LessThanEqualToFilter">
            <summary>
            Represents a comparison where the left hand item is less than or equal to the right hand item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanEqualToFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a LessThanEqualToFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanEqualToFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.LessThanFilter">
            <summary>
            Represents a comparison where the left hand item is less than the right hand item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a LessThanFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.LessThanFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.LikeFilter">
            <summary>
            Represents a comparison where the left hand item is greater than or equal to the right hand item.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.LikeFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a LikeFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.LikeFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.LikeFilter.Not">
            <summary>
            Gets or sets whether to negate the comparison.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Minus">
            <summary>
            Removes the items returned by the second query from the first query.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Minus.#ctor(SQLGeneration.Builders.ISelectBuilder,SQLGeneration.Builders.ISelectBuilder)">
            <summary>
            Initializes a new instance of a Minus.
            </summary>
            <param name="leftHand">The left hand SELECT command.</param>
            <param name="rightHand">The right hand SELECT command.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Minus.GetCombinationType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Retrieves the text used to combine two queries.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The text used to combine two queries.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Subtraction">
            <summary>
            Represents the substraction of two items in a command.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Subtraction.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Subtraction.
            </summary>
            <param name="leftHand">The left hand side of the expression.</param>
            <param name="rightHand">The right hand side of the expression.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Subtraction.GetOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the token representing the arithmetic operator.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The token representing the arithmetic operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Multiplication">
            <summary>
            Represents the multiplication of two items in a command.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Multiplication.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Multiplication.
            </summary>
            <param name="leftHand">The left hand side of the expression.</param>
            <param name="rightHand">The right hand side of the expression.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Multiplication.GetOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the token representing the arithmetic operator.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The token representing the arithmetic operator.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.NotEqualToFilter">
            <summary>
            Represents a comparison between two items for inequality.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NotEqualToFilter.#ctor(SQLGeneration.Builders.IFilterItem,SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a NotEqualToFilter.
            </summary>
            <param name="leftHand">The left hand item.</param>
            <param name="rightHand">The right hand item.</param>
        </member>
        <member name="M:SQLGeneration.Builders.NotEqualToFilter.GetComparisonOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the operator that will compare the left and right hand values.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string containing the name of the operation that compares the left and right hand sides.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.NullFilter">
            <summary>
            Represents a comparison between a value and null.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NullFilter.#ctor(SQLGeneration.Builders.IFilterItem)">
            <summary>
            Initializes a new instance of a NullFilter.
            </summary>
            <param name="item">The item to check whether or not is null.</param>
        </member>
        <member name="M:SQLGeneration.Builders.NullFilter.GetInnerFilterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the filter text irrespective of the parentheses.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>A string representing the filter.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.NullFilter.LeftHand">
            <summary>
            Gets the item being compared to null.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.NullFilter.Not">
            <summary>
            Gets or sets whether to negate the comparison.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.NullLiteral">
            <summary>
            Represents the literal NULL.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NullLiteral.#ctor">
            <summary>
            Initializes a new instance of a NullLiteral.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NullLiteral.GetTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representing the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.NullPlacement">
            <summary>
            Specifies the position of NULLs in a result set.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.NullPlacement.Default">
            <summary>
            The null placement is determined by the database provider.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.NullPlacement.First">
            <summary>
            The null values appear before the remaining results.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.NullPlacement.Last">
            <summary>
            The null values appear after the remaining results.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.NullPlacementConverter">
            <summary>
            Converts null placements to their string representations.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NullPlacementConverter.#ctor">
            <summary>
            Initializes a new instance of a NullPlacementConverter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NullPlacementConverter.ToToken(SQLGeneration.Builders.NullPlacement)">
            <summary>
            Gets a string representation of the given null placement.
            </summary>
            <param name="placement">The null placement to convert to a string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.NumericLiteral">
            <summary>
            Represents a numeric literal.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NumericLiteral.#ctor">
            <summary>
            Initializes a new instance of a NumericLiteral.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.NumericLiteral.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a NumericLiteral.
            </summary>
            <param name="value">The value to make the literal.</param>
        </member>
        <member name="M:SQLGeneration.Builders.NumericLiteral.GetTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representing the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.NumericLiteral.Value">
            <summary>
            Gets or sets the numeric value of the literal.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.NumericLiteral.Format">
            <summary>
            Gets or sets the format to represent the value with.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.OrderBy">
            <summary>
            Represents an item in the order by clause of a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.OrderBy.#ctor(SQLGeneration.Builders.AliasedProjection,SQLGeneration.Builders.Order,SQLGeneration.Builders.NullPlacement)">
            <summary>
            Initializes a new instance of a OrderBy.
            </summary>
            <param name="projection">The item to sort by.</param>
            <param name="order">The order in which to sort the items.</param>
            <param name="nullPlacement">The placement of nulls in the results.</param>
        </member>
        <member name="M:SQLGeneration.Builders.OrderBy.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.Order,SQLGeneration.Builders.NullPlacement)">
            <summary>
            Initializes a new instance of a OrderBy.
            </summary>
            <param name="projection">The item to sort by.</param>
            <param name="order">The order in which to sort the items.</param>
            <param name="nullPlacement">The placement of nulls in the results.</param>
        </member>
        <member name="M:SQLGeneration.Builders.OrderBy.GetOrderByTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the text making up the order by expression.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The order by text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.OrderBy.Projection">
            <summary>
            Gets the item to order by.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.OrderBy.Order">
            <summary>
            Gets or sets the order to sort the results.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.OrderBy.NullPlacement">
            <summary>
            Specifies where null values appear in the results.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Order">
            <summary>
            Specifies the order that results are sorted.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Order.Default">
            <summary>
            Sorts the result using the default ordering.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Order.Ascending">
            <summary>
            Sort the results in ascending order.
            </summary>
        </member>
        <member name="F:SQLGeneration.Builders.Order.Descending">
            <summary>
            Sorts the results in descending order.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.OrderConverter">
            <summary>
            Converts between representations of the Order enum.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.OrderConverter.#ctor">
            <summary>
            Initializes a new instance of a OrderConverter.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.OrderConverter.ToToken(SQLGeneration.Builders.Order)">
            <summary>
            Gets the string representation of an Order enum.
            </summary>
            <param name="order">The value of the enum.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Addition">
            <summary>
            Represents the addition of two items in a command.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Addition.#ctor(SQLGeneration.Builders.IProjectionItem,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Addition.
            </summary>
            <param name="leftHand">The left hand side of the expression.</param>
            <param name="rightHand">The right hand side of the expression.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Addition.GetOperator(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the token representing the arithmetic operator.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The token representing the arithmetic operator.</returns>
        </member>
        <member name="T:SQLGeneration.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankColumnName">
            <summary>
              Looks up a localized string similar to Encountered a null or blank column name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankExpressionType">
            <summary>
              Looks up a localized string similar to Encountered a null or blank expression type..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankFunctionName">
            <summary>
              Looks up a localized string similar to Encountered a null or blank function name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankItemName">
            <summary>
              Looks up a localized string similar to Encountered a null or blank expression item name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankParameterName">
            <summary>
              Looks up a localized string similar to Encountered a null or blank parameter name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankParameterPrefix">
            <summary>
              Looks up a localized string similar to Encountered a null or blank parameter prefix..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankSchemaName">
            <summary>
              Looks up a localized string similar to Encountered a null or blank schema name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankTableName">
            <summary>
              Looks up a localized string similar to Encountered a null or blank table name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.BlankTokenValue">
            <summary>
              Looks up a localized string similar to Encountered a null or blank expected token value..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.DuplicateExpressionItemName">
            <summary>
              Looks up a localized string similar to An attempt was made to define two expressions items with the same name..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.DuplicateSourceName">
            <summary>
              Looks up a localized string similar to Encountered a duplicate source name: {0}. Use an alias to distinguish between multiple references to the same table..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.DuplicateTokenDefinition">
            <summary>
              Looks up a localized string similar to An attempt was made to define two tokens with the same name: {0}..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.EmptyCaseExpression">
            <summary>
              Looks up a localized string similar to An attempt was made to create a case expression without any cases..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.EmptyFilterGroup">
            <summary>
              Looks up a localized string similar to An attempt was made to build an empty filter clause..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.EmptyNamespace">
            <summary>
              Looks up a localized string similar to An attempt was made to specify an empty namespace..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.EmptyOnExpression">
            <summary>
              Looks up a localized string similar to An attempt was made to build a join without any filters..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.MissingHandlers">
            <summary>
              Looks up a localized string similar to Not all expression types have a handler assigned to them..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.NegativeRowCount">
            <summary>
              Looks up a localized string similar to The row count cannot be negative when defining a bound function window frame..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.NoProjections">
            <summary>
              Looks up a localized string similar to An attempt was made to build a select command without any projections..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.NoQueries">
            <summary>
              Looks up a localized string similar to An attempt was made to build a compound command without any commands..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.NoSetters">
            <summary>
              Looks up a localized string similar to An attempt was made to build an update statement without any setters..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.ReferencedJoinWithoutAlias">
            <summary>
              Looks up a localized string similar to A reference to a join was made without defining an alias for it..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.ReferencedQueryCombinerWithoutAlias">
            <summary>
              Looks up a localized string similar to A reference to a compound command was made without defining an alias for it..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.ReferencedQueryWithoutAlias">
            <summary>
              Looks up a localized string similar to A reference to a sub-select was made without defining an alias for it..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnexpectedToken">
            <summary>
              Looks up a localized string similar to Encountered unexpected token: {0}..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownConjunction">
            <summary>
              Looks up a localized string similar to Encountered an unknown conjunction type..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownDistinctQualifier">
            <summary>
              Looks up a localized string similar to Encountered an unknown distinct qualifier..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownFrameType">
            <summary>
              Looks up a localized string similar to Encountered an unknown windowed function frame type..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownNullPlacement">
            <summary>
              Looks up a localized string similar to Encountered an unknown null placement..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownOrder">
            <summary>
              Looks up a localized string similar to Encountered an unknown ordering..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownQuantifier">
            <summary>
              Looks up a localized string similar to Encountered an unknown quantifier..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownSource">
            <summary>
              Looks up a localized string similar to An attempt was made to retrieve an column source: {0}..
            </summary>
        </member>
        <member name="P:SQLGeneration.Properties.Resources.UnknownTokenType">
            <summary>
              Looks up a localized string similar to Encountered an unknown token type..
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.SelectBuilder">
            <summary>
            Builds a string of a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.#ctor">
            <summary>
            Initializes a new instance of a SelectBuilder.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddProjection(SQLGeneration.Builders.IProjectionItem,System.String)">
            <summary>
            Adds a projection item to the projection.
            </summary>
            <param name="item">The projection item to add.</param>
            <param name="alias">The alias to refer to the item with.</param>
            <returns>The item that was added.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveProjection(SQLGeneration.Builders.AliasedProjection)">
            <summary>
            Removes the projection item from the projection.
            </summary>
            <param name="projection">The projection item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddTable(SQLGeneration.Builders.Table,System.String)">
            <summary>
            Adds the given table to the FROM clause.
            </summary>
            <param name="table">The table to add.</param>
            <param name="alias">The optional alias to give the table within the SELECT statement.</param>
            <returns>An object to support aliasing the table and defining columns.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddFunction(SQLGeneration.Builders.Function,System.String)">
            <summary>
            Adds the given function to the FROM clause.
            </summary>
            <param name="function">The function to add.</param>
            <param name="alias">The optional alias to give the function within the SELECT statement.</param>
            <returns>An object to support aliasing the function and defining column.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddSelect(SQLGeneration.Builders.ISelectBuilder,System.String)">
            <summary>
            Adds the given SELECT statement to the FROM clause.
            </summary>
            <param name="builder">The SELECT statement to add.</param>
            <param name="alias">The optional alias to give the SELECT statement within the SELECT statement.</param>
            <returns>An object to support aliasing the SELECT statement and defining columns.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddJoin(SQLGeneration.Builders.Join)">
            <summary>
            Adds the given join to the FROM clause.
            </summary>
            <param name="join">The join to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveSource(SQLGeneration.Builders.AliasedSource)">
            <summary>
            Removes the given table or SELECT statement from the FROM clause.
            </summary>
            <param name="source">The table or SELECT statement to remove.</param>
            <returns>True if the table or SELECT statement was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveJoin(SQLGeneration.Builders.Join)">
            <summary>
            Removes the given join from the FROM clause.
            </summary>
            <param name="join">The join to remove.</param>
            <returns>True if the item was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Adds a sort criteria to the query.
            </summary>
            <param name="item">The sort criteria to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveOrderBy(SQLGeneration.Builders.OrderBy)">
            <summary>
            Removes the sort criteria from the query.
            </summary>
            <param name="item">The order by item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddGroupBy(SQLGeneration.Builders.IGroupByItem)">
            <summary>
            Adds the item to the group by clause of the query.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveGroupBy(SQLGeneration.Builders.IGroupByItem)">
            <summary>
            Removes the item from the group by clause of the query.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the where clause.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the where clause.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.AddHaving(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the having clause.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.RemoveHaving(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the having clause.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.SelectBuilder.SQLGeneration#Builders#ICommand#GetCommandTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the SQL that represents the query.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.Distinct">
            <summary>
            Gets or sets how the database will handle duplicate records.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.Top">
            <summary>
            Gets or sets the TOP clause.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.Projection">
            <summary>
            Gets the items that are part of the projection.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.From">
            <summary>
            Gets the tables, joins or sub-queries that are projected from.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.Sources">
            <summary>
            Gets the sources that have been added to the builder.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.OrderBy">
            <summary>
            Gets the items used to sort the results.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.GroupBy">
            <summary>
            Gets the items that the query is grouped by.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.Where">
            <summary>
            Gets the filters in the filter group.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.WhereFilterGroup">
            <summary>
            Gets the filter group used to build the where clause.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.Having">
            <summary>
            Gets the filters in the having clause.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.SelectBuilder.HavingFilterGroup">
            <summary>
            Gets the filter group used to building the having clause.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.RightOuterJoin">
            <summary>
            Represents an right-outer join in a select statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.RightOuterJoin.#ctor(SQLGeneration.Builders.Join,SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of a RightOuterJoin.
            </summary>
            <param name="leftHand">The left hand item in the join.</param>
            <param name="rightHand">The right hand table in the join.</param>
        </member>
        <member name="M:SQLGeneration.Builders.RightOuterJoin.GetJoinType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the name of the join type.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The name of the join type.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.Namespace">
            <summary>
            Qualifies an object with one or more identifiers.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Namespace.#ctor(System.String[])">
            <summary>
            Initializes a new instance of a Namespace.
            </summary>
            <param name="qualifiers">The qualifiers to include, in the order they will appear in the output.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Namespace.AddQualifier(System.String)">
            <summary>
            Adds the given qualifier.
            </summary>
            <param name="qualifier">The qualifier to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Namespace.GetNamespaceTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the tokens making up the namespace.
            </summary>
            <param name="options">The configuration settings to use when generating tokens.</param>
            <returns>The tokens making up the namespace.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.Namespace.Qualifiers">
            <summary>
            Gets the qualifiers making up the namespace.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Setter">
            <summary>
            Adds a column being set to a value to the command.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Setter.#ctor(SQLGeneration.Builders.Column,SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Setter.
            </summary>
            <param name="column">The name of the column to set.</param>
            <param name="value">The value to set the column to.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Setter.GetSetterTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the expression for setting a column in an update statement.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The setter expression.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.Setter.Column">
            <summary>
            Gets the column being set.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Setter.Value">
            <summary>
            Gets the value that the column is being set to.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.AllColumns">
            <summary>
            Selects all of the columns in a table or a join.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.AllColumns.#ctor">
            <summary>
            Initializes a new instacne of an AllColumns
            that doesn't have a table or join.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.AllColumns.#ctor(SQLGeneration.Builders.AliasedSource)">
            <summary>
            Initializes a new instance of an AllColumns
            that selects all the columns from the given table or join.
            </summary>
            <param name="source">The table or join to select all the columns from.</param>
        </member>
        <member name="T:SQLGeneration.Builders.StringLiteral">
            <summary>
            Represents a literal string.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.StringLiteral.#ctor">
            <summary>
            Initializes a new instance of a StringLiteral.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.StringLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance of a StringLiteral.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:SQLGeneration.Builders.StringLiteral.GetTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets a string representing the item.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.StringLiteral.Value">
            <summary>
            Gets or sets the value of the string literal.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Table">
            <summary>
            Provides a table name.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Table.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Table.
            </summary>
            <param name="name">The name of the table.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Table.#ctor(SQLGeneration.Builders.Namespace,System.String)">
            <summary>
            Initializes a new instance of a Table.
            </summary>
            <param name="qualifier">The schema the table belongs to.</param>
            <param name="name">The name of the table.</param>
        </member>
        <member name="P:SQLGeneration.Builders.Table.Qualifier">
            <summary>
            Gets or sets the schema the table belongs to.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Table.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Top">
            <summary>
            Builds a TOP clause that is found in a SELECT statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Top.#ctor(SQLGeneration.Builders.IProjectionItem)">
            <summary>
            Initializes a new instance of a Top.
            </summary>
            <param name="expression">The number or percent of items to return.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Top.GetTopTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the textual representation of the TOP clause.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="P:SQLGeneration.Builders.Top.Expression">
            <summary>
            Gets the expression representing the number or percent of rows to return.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Top.IsPercent">
            <summary>
            Gets whether or not the expression represents a percent.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.Top.WithTies">
            <summary>
            Gets or sets whether records matching the last item according to the order by
            clause shall be returned.
            </summary>
        </member>
        <member name="T:SQLGeneration.Builders.Union">
            <summary>
            Unions the items from the first query to the second.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.Union.#ctor(SQLGeneration.Builders.ISelectBuilder,SQLGeneration.Builders.ISelectBuilder)">
            <summary>
            Initializes a new instance of a Union.
            </summary>
            <param name="leftHand">The left hand SELECT command.</param>
            <param name="rightHand">The right hand SELECT command.</param>
        </member>
        <member name="M:SQLGeneration.Builders.Union.GetCombinationType(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Retrieves the text used to combine two queries.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
            <returns>The text used to combine two queries.</returns>
        </member>
        <member name="T:SQLGeneration.Builders.UpdateBuilder">
            <summary>
            Builds a string of an update statement.
            </summary>
        </member>
        <member name="M:SQLGeneration.Builders.UpdateBuilder.#ctor(SQLGeneration.Builders.Table,System.String)">
            <summary>
            Initializes a new instance of a UpdateBuilder.
            </summary>
            <param name="table">The table being updated.</param>
            <param name="alias">The alias to use to refer to the table.</param>
        </member>
        <member name="M:SQLGeneration.Builders.UpdateBuilder.AddSetter(SQLGeneration.Builders.Setter)">
            <summary>
            Adds the setter to the update statement.
            </summary>
            <param name="setter">The setter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.UpdateBuilder.RemoveSetter(SQLGeneration.Builders.Setter)">
            <summary>
            Removes the setter from the update statement.
            </summary>
            <param name="setter">The setter to remove.</param>
            <returns>True if the setter is removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.UpdateBuilder.AddWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Adds the filter to the where clause.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:SQLGeneration.Builders.UpdateBuilder.RemoveWhere(SQLGeneration.Builders.IFilter)">
            <summary>
            Removes the filter from the where clause.
            </summary>
            <param name="filter">The filter to remove.</param>
            <returns>True if the filter was removed; otherwise, false.</returns>
        </member>
        <member name="M:SQLGeneration.Builders.UpdateBuilder.SQLGeneration#Builders#ICommand#GetCommandTokens(SQLGeneration.Builders.CommandOptions)">
            <summary>
            Gets the command text.
            </summary>
            <param name="options">The configuration to use when building the command.</param>
        </member>
        <member name="P:SQLGeneration.Builders.UpdateBuilder.Table">
            <summary>
            Gets the table that is being updated.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.UpdateBuilder.Setters">
            <summary>
            Gets the columns that are being set.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.UpdateBuilder.Where">
            <summary>
            Gets the filters in the where clause.
            </summary>
        </member>
        <member name="P:SQLGeneration.Builders.UpdateBuilder.WhereFilterGroup">
            <summary>
            Gets the filter group used to build the where clause.
            </summary>
        </member>
    </members>
</doc>
